/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2449.0, "minX": 0.0, "maxY": 217650.0, "series": [{"data": [[0.0, 2449.0], [0.1, 2653.0], [0.2, 2703.0], [0.3, 2703.0], [0.4, 2979.0], [0.5, 3038.0], [0.6, 3119.0], [0.7, 3174.0], [0.8, 3235.0], [0.9, 3329.0], [1.0, 3346.0], [1.1, 3377.0], [1.2, 3393.0], [1.3, 3399.0], [1.4, 3399.0], [1.5, 3471.0], [1.6, 3480.0], [1.7, 3565.0], [1.8, 3591.0], [1.9, 3613.0], [2.0, 3615.0], [2.1, 3618.0], [2.2, 3620.0], [2.3, 3624.0], [2.4, 3628.0], [2.5, 3634.0], [2.6, 3680.0], [2.7, 3686.0], [2.8, 3694.0], [2.9, 3695.0], [3.0, 3701.0], [3.1, 3727.0], [3.2, 3733.0], [3.3, 3749.0], [3.4, 3801.0], [3.5, 3829.0], [3.6, 3861.0], [3.7, 3869.0], [3.8, 3878.0], [3.9, 3899.0], [4.0, 3912.0], [4.1, 3924.0], [4.2, 3933.0], [4.3, 3983.0], [4.4, 4013.0], [4.5, 4058.0], [4.6, 4059.0], [4.7, 4062.0], [4.8, 4072.0], [4.9, 4091.0], [5.0, 4113.0], [5.1, 4128.0], [5.2, 4130.0], [5.3, 4136.0], [5.4, 4157.0], [5.5, 4172.0], [5.6, 4198.0], [5.7, 4199.0], [5.8, 4205.0], [5.9, 4213.0], [6.0, 4217.0], [6.1, 4222.0], [6.2, 4227.0], [6.3, 4242.0], [6.4, 4244.0], [6.5, 4252.0], [6.6, 4265.0], [6.7, 4292.0], [6.8, 4311.0], [6.9, 4311.0], [7.0, 4314.0], [7.1, 4316.0], [7.2, 4330.0], [7.3, 4358.0], [7.4, 4365.0], [7.5, 4384.0], [7.6, 4392.0], [7.7, 4422.0], [7.8, 4432.0], [7.9, 4451.0], [8.0, 4464.0], [8.1, 4468.0], [8.2, 4480.0], [8.3, 4485.0], [8.4, 4520.0], [8.5, 4553.0], [8.6, 4566.0], [8.7, 4570.0], [8.8, 4583.0], [8.9, 4586.0], [9.0, 4598.0], [9.1, 4601.0], [9.2, 4615.0], [9.3, 4623.0], [9.4, 4633.0], [9.5, 4639.0], [9.6, 4640.0], [9.7, 4648.0], [9.8, 4654.0], [9.9, 4657.0], [10.0, 4661.0], [10.1, 4665.0], [10.2, 4674.0], [10.3, 4695.0], [10.4, 4727.0], [10.5, 4765.0], [10.6, 4773.0], [10.7, 4783.0], [10.8, 4788.0], [10.9, 4798.0], [11.0, 4800.0], [11.1, 4806.0], [11.2, 4810.0], [11.3, 4825.0], [11.4, 4862.0], [11.5, 4893.0], [11.6, 4894.0], [11.7, 4899.0], [11.8, 4903.0], [11.9, 4905.0], [12.0, 4917.0], [12.1, 4928.0], [12.2, 4940.0], [12.3, 4943.0], [12.4, 4949.0], [12.5, 4955.0], [12.6, 4965.0], [12.7, 4999.0], [12.8, 5000.0], [12.9, 5003.0], [13.0, 5019.0], [13.1, 5021.0], [13.2, 5035.0], [13.3, 5080.0], [13.4, 5088.0], [13.5, 5091.0], [13.6, 5097.0], [13.7, 5101.0], [13.8, 5104.0], [13.9, 5140.0], [14.0, 5147.0], [14.1, 5153.0], [14.2, 5156.0], [14.3, 5161.0], [14.4, 5172.0], [14.5, 5177.0], [14.6, 5182.0], [14.7, 5221.0], [14.8, 5234.0], [14.9, 5242.0], [15.0, 5260.0], [15.1, 5270.0], [15.2, 5295.0], [15.3, 5312.0], [15.4, 5322.0], [15.5, 5344.0], [15.6, 5355.0], [15.7, 5371.0], [15.8, 5371.0], [15.9, 5391.0], [16.0, 5402.0], [16.1, 5412.0], [16.2, 5423.0], [16.3, 5423.0], [16.4, 5427.0], [16.5, 5431.0], [16.6, 5436.0], [16.7, 5444.0], [16.8, 5447.0], [16.9, 5449.0], [17.0, 5453.0], [17.1, 5462.0], [17.2, 5472.0], [17.3, 5473.0], [17.4, 5480.0], [17.5, 5482.0], [17.6, 5502.0], [17.7, 5517.0], [17.8, 5518.0], [17.9, 5528.0], [18.0, 5537.0], [18.1, 5541.0], [18.2, 5563.0], [18.3, 5581.0], [18.4, 5585.0], [18.5, 5599.0], [18.6, 5600.0], [18.7, 5608.0], [18.8, 5635.0], [18.9, 5661.0], [19.0, 5691.0], [19.1, 5696.0], [19.2, 5696.0], [19.3, 5699.0], [19.4, 5711.0], [19.5, 5718.0], [19.6, 5720.0], [19.7, 5738.0], [19.8, 5743.0], [19.9, 5786.0], [20.0, 5793.0], [20.1, 5798.0], [20.2, 5805.0], [20.3, 5808.0], [20.4, 5833.0], [20.5, 5840.0], [20.6, 5864.0], [20.7, 5876.0], [20.8, 5887.0], [20.9, 5908.0], [21.0, 5914.0], [21.1, 5923.0], [21.2, 5932.0], [21.3, 5954.0], [21.4, 5964.0], [21.5, 5964.0], [21.6, 5964.0], [21.7, 5966.0], [21.8, 5967.0], [21.9, 5989.0], [22.0, 5996.0], [22.1, 6042.0], [22.2, 6043.0], [22.3, 6045.0], [22.4, 6057.0], [22.5, 6076.0], [22.6, 6108.0], [22.7, 6126.0], [22.8, 6136.0], [22.9, 6142.0], [23.0, 6151.0], [23.1, 6151.0], [23.2, 6157.0], [23.3, 6160.0], [23.4, 6176.0], [23.5, 6205.0], [23.6, 6221.0], [23.7, 6235.0], [23.8, 6240.0], [23.9, 6245.0], [24.0, 6278.0], [24.1, 6300.0], [24.2, 6307.0], [24.3, 6323.0], [24.4, 6338.0], [24.5, 6351.0], [24.6, 6354.0], [24.7, 6383.0], [24.8, 6406.0], [24.9, 6410.0], [25.0, 6412.0], [25.1, 6447.0], [25.2, 6449.0], [25.3, 6449.0], [25.4, 6475.0], [25.5, 6479.0], [25.6, 6484.0], [25.7, 6557.0], [25.8, 6569.0], [25.9, 6578.0], [26.0, 6585.0], [26.1, 6597.0], [26.2, 6618.0], [26.3, 6676.0], [26.4, 6677.0], [26.5, 6681.0], [26.6, 6713.0], [26.7, 6714.0], [26.8, 6714.0], [26.9, 6731.0], [27.0, 6735.0], [27.1, 6754.0], [27.2, 6762.0], [27.3, 6805.0], [27.4, 6809.0], [27.5, 6812.0], [27.6, 6813.0], [27.7, 6838.0], [27.8, 6847.0], [27.9, 6852.0], [28.0, 6914.0], [28.1, 6914.0], [28.2, 6941.0], [28.3, 6952.0], [28.4, 6990.0], [28.5, 7011.0], [28.6, 7013.0], [28.7, 7024.0], [28.8, 7041.0], [28.9, 7044.0], [29.0, 7129.0], [29.1, 7155.0], [29.2, 7160.0], [29.3, 7170.0], [29.4, 7221.0], [29.5, 7297.0], [29.6, 7301.0], [29.7, 7303.0], [29.8, 7341.0], [29.9, 7352.0], [30.0, 7354.0], [30.1, 7365.0], [30.2, 7383.0], [30.3, 7385.0], [30.4, 7392.0], [30.5, 7395.0], [30.6, 7483.0], [30.7, 7535.0], [30.8, 7539.0], [30.9, 7594.0], [31.0, 7609.0], [31.1, 7638.0], [31.2, 7645.0], [31.3, 7668.0], [31.4, 7688.0], [31.5, 7688.0], [31.6, 7689.0], [31.7, 7711.0], [31.8, 7715.0], [31.9, 7725.0], [32.0, 7741.0], [32.1, 7756.0], [32.2, 7759.0], [32.3, 7773.0], [32.4, 7777.0], [32.5, 7781.0], [32.6, 7832.0], [32.7, 7840.0], [32.8, 7860.0], [32.9, 7861.0], [33.0, 7899.0], [33.1, 7900.0], [33.2, 7906.0], [33.3, 7913.0], [33.4, 7921.0], [33.5, 7945.0], [33.6, 7962.0], [33.7, 7974.0], [33.8, 7979.0], [33.9, 7981.0], [34.0, 8007.0], [34.1, 8046.0], [34.2, 8056.0], [34.3, 8094.0], [34.4, 8113.0], [34.5, 8157.0], [34.6, 8166.0], [34.7, 8242.0], [34.8, 8246.0], [34.9, 8252.0], [35.0, 8281.0], [35.1, 8303.0], [35.2, 8341.0], [35.3, 8368.0], [35.4, 8385.0], [35.5, 8408.0], [35.6, 8408.0], [35.7, 8453.0], [35.8, 8462.0], [35.9, 8549.0], [36.0, 8554.0], [36.1, 8555.0], [36.2, 8556.0], [36.3, 8559.0], [36.4, 8562.0], [36.5, 8586.0], [36.6, 8638.0], [36.7, 8647.0], [36.8, 8660.0], [36.9, 8667.0], [37.0, 8710.0], [37.1, 8717.0], [37.2, 8724.0], [37.3, 8730.0], [37.4, 8734.0], [37.5, 8755.0], [37.6, 8773.0], [37.7, 8773.0], [37.8, 8798.0], [37.9, 8815.0], [38.0, 8846.0], [38.1, 8903.0], [38.2, 8948.0], [38.3, 9035.0], [38.4, 9126.0], [38.5, 9151.0], [38.6, 9181.0], [38.7, 9260.0], [38.8, 9379.0], [38.9, 9389.0], [39.0, 9390.0], [39.1, 9394.0], [39.2, 9466.0], [39.3, 9509.0], [39.4, 9512.0], [39.5, 9541.0], [39.6, 9544.0], [39.7, 9545.0], [39.8, 9572.0], [39.9, 9602.0], [40.0, 9673.0], [40.1, 9737.0], [40.2, 9963.0], [40.3, 9990.0], [40.4, 10097.0], [40.5, 10116.0], [40.6, 10181.0], [40.7, 10361.0], [40.8, 10665.0], [40.9, 10672.0], [41.0, 10811.0], [41.1, 10957.0], [41.2, 11179.0], [41.3, 11195.0], [41.4, 11204.0], [41.5, 11209.0], [41.6, 11241.0], [41.7, 11308.0], [41.8, 11345.0], [41.9, 11373.0], [42.0, 11374.0], [42.1, 11508.0], [42.2, 11526.0], [42.3, 11577.0], [42.4, 11578.0], [42.5, 11616.0], [42.6, 11675.0], [42.7, 11708.0], [42.8, 11817.0], [42.9, 11896.0], [43.0, 11956.0], [43.1, 12040.0], [43.2, 12056.0], [43.3, 12118.0], [43.4, 12132.0], [43.5, 12141.0], [43.6, 12151.0], [43.7, 12206.0], [43.8, 12212.0], [43.9, 12212.0], [44.0, 12247.0], [44.1, 12268.0], [44.2, 12276.0], [44.3, 12277.0], [44.4, 12313.0], [44.5, 12354.0], [44.6, 12426.0], [44.7, 12446.0], [44.8, 12459.0], [44.9, 12461.0], [45.0, 12470.0], [45.1, 12509.0], [45.2, 12595.0], [45.3, 12648.0], [45.4, 12656.0], [45.5, 12663.0], [45.6, 12665.0], [45.7, 12699.0], [45.8, 12782.0], [45.9, 12794.0], [46.0, 12837.0], [46.1, 12956.0], [46.2, 12972.0], [46.3, 12977.0], [46.4, 12989.0], [46.5, 13002.0], [46.6, 13010.0], [46.7, 13021.0], [46.8, 13082.0], [46.9, 13108.0], [47.0, 13131.0], [47.1, 13279.0], [47.2, 13295.0], [47.3, 13312.0], [47.4, 13315.0], [47.5, 13463.0], [47.6, 13617.0], [47.7, 13691.0], [47.8, 13735.0], [47.9, 13751.0], [48.0, 13872.0], [48.1, 13919.0], [48.2, 13940.0], [48.3, 14012.0], [48.4, 14067.0], [48.5, 14081.0], [48.6, 14213.0], [48.7, 14248.0], [48.8, 14403.0], [48.9, 14624.0], [49.0, 14655.0], [49.1, 14707.0], [49.2, 15814.0], [49.3, 18015.0], [49.4, 18575.0], [49.5, 18633.0], [49.6, 19000.0], [49.7, 19090.0], [49.8, 19193.0], [49.9, 19412.0], [50.0, 19830.0], [50.1, 19882.0], [50.2, 19954.0], [50.3, 20007.0], [50.4, 20034.0], [50.5, 20059.0], [50.6, 20063.0], [50.7, 20162.0], [50.8, 20169.0], [50.9, 20186.0], [51.0, 20241.0], [51.1, 20289.0], [51.2, 20340.0], [51.3, 20386.0], [51.4, 20525.0], [51.5, 20588.0], [51.6, 20593.0], [51.7, 20631.0], [51.8, 20680.0], [51.9, 20726.0], [52.0, 20762.0], [52.1, 20825.0], [52.2, 20836.0], [52.3, 20874.0], [52.4, 20891.0], [52.5, 20893.0], [52.6, 20910.0], [52.7, 20973.0], [52.8, 20993.0], [52.9, 21034.0], [53.0, 21075.0], [53.1, 21139.0], [53.2, 21180.0], [53.3, 21184.0], [53.4, 21186.0], [53.5, 21225.0], [53.6, 21228.0], [53.7, 21358.0], [53.8, 21371.0], [53.9, 21484.0], [54.0, 21523.0], [54.1, 21742.0], [54.2, 21757.0], [54.3, 21798.0], [54.4, 21862.0], [54.5, 21986.0], [54.6, 22172.0], [54.7, 22450.0], [54.8, 22510.0], [54.9, 22515.0], [55.0, 23006.0], [55.1, 23773.0], [55.2, 24063.0], [55.3, 26732.0], [55.4, 26850.0], [55.5, 35317.0], [55.6, 36047.0], [55.7, 36094.0], [55.8, 36273.0], [55.9, 36274.0], [56.0, 36285.0], [56.1, 36414.0], [56.2, 36504.0], [56.3, 36610.0], [56.4, 36645.0], [56.5, 36774.0], [56.6, 36781.0], [56.7, 36894.0], [56.8, 36910.0], [56.9, 36914.0], [57.0, 37012.0], [57.1, 37082.0], [57.2, 37101.0], [57.3, 37115.0], [57.4, 37223.0], [57.5, 37352.0], [57.6, 37353.0], [57.7, 37396.0], [57.8, 37402.0], [57.9, 37433.0], [58.0, 37503.0], [58.1, 37533.0], [58.2, 37586.0], [58.3, 37637.0], [58.4, 37652.0], [58.5, 37703.0], [58.6, 37710.0], [58.7, 37720.0], [58.8, 37728.0], [58.9, 37735.0], [59.0, 37770.0], [59.1, 37871.0], [59.2, 37960.0], [59.3, 37965.0], [59.4, 37978.0], [59.5, 38004.0], [59.6, 38015.0], [59.7, 38058.0], [59.8, 38062.0], [59.9, 38189.0], [60.0, 38254.0], [60.1, 39157.0], [60.2, 39489.0], [60.3, 39646.0], [60.4, 39715.0], [60.5, 39978.0], [60.6, 39982.0], [60.7, 40641.0], [60.8, 40704.0], [60.9, 42213.0], [61.0, 47253.0], [61.1, 55752.0], [61.2, 61261.0], [61.3, 66722.0], [61.4, 68448.0], [61.5, 68689.0], [61.6, 68937.0], [61.7, 68946.0], [61.8, 68962.0], [61.9, 69046.0], [62.0, 69274.0], [62.1, 69276.0], [62.2, 69301.0], [62.3, 69411.0], [62.4, 69466.0], [62.5, 69473.0], [62.6, 69552.0], [62.7, 69556.0], [62.8, 69586.0], [62.9, 69664.0], [63.0, 69673.0], [63.1, 69740.0], [63.2, 69841.0], [63.3, 69910.0], [63.4, 69923.0], [63.5, 70070.0], [63.6, 70079.0], [63.7, 70089.0], [63.8, 70100.0], [63.9, 70126.0], [64.0, 70248.0], [64.1, 70250.0], [64.2, 70559.0], [64.3, 70570.0], [64.4, 70643.0], [64.5, 70677.0], [64.6, 70701.0], [64.7, 70753.0], [64.8, 70755.0], [64.9, 70771.0], [65.0, 70788.0], [65.1, 70801.0], [65.2, 70946.0], [65.3, 71172.0], [65.4, 71228.0], [65.5, 71249.0], [65.6, 71250.0], [65.7, 71520.0], [65.8, 71672.0], [65.9, 71874.0], [66.0, 72021.0], [66.1, 72477.0], [66.2, 72530.0], [66.3, 73418.0], [66.4, 73703.0], [66.5, 74559.0], [66.6, 74956.0], [66.7, 80162.0], [66.8, 104248.0], [66.9, 110896.0], [67.0, 111146.0], [67.1, 111190.0], [67.2, 112365.0], [67.3, 121296.0], [67.4, 121313.0], [67.5, 124852.0], [67.6, 126313.0], [67.7, 128016.0], [67.8, 129542.0], [67.9, 129609.0], [68.0, 129656.0], [68.1, 129718.0], [68.2, 129808.0], [68.3, 129810.0], [68.4, 129834.0], [68.5, 129841.0], [68.6, 129899.0], [68.7, 129920.0], [68.8, 129921.0], [68.9, 129944.0], [69.0, 129988.0], [69.1, 130002.0], [69.2, 130012.0], [69.3, 130038.0], [69.4, 130048.0], [69.5, 130103.0], [69.6, 130147.0], [69.7, 130267.0], [69.8, 130329.0], [69.9, 130339.0], [70.0, 130378.0], [70.1, 130380.0], [70.2, 130384.0], [70.3, 130385.0], [70.4, 130396.0], [70.5, 130495.0], [70.6, 130527.0], [70.7, 130588.0], [70.8, 130608.0], [70.9, 130684.0], [71.0, 130840.0], [71.1, 130843.0], [71.2, 130860.0], [71.3, 130983.0], [71.4, 130989.0], [71.5, 130993.0], [71.6, 131016.0], [71.7, 131017.0], [71.8, 131030.0], [71.9, 131049.0], [72.0, 131057.0], [72.1, 131098.0], [72.2, 131105.0], [72.3, 131116.0], [72.4, 131137.0], [72.5, 131157.0], [72.6, 131158.0], [72.7, 131163.0], [72.8, 131171.0], [72.9, 131188.0], [73.0, 131196.0], [73.1, 131239.0], [73.2, 131258.0], [73.3, 131266.0], [73.4, 131291.0], [73.5, 131296.0], [73.6, 131301.0], [73.7, 131306.0], [73.8, 131362.0], [73.9, 131370.0], [74.0, 131377.0], [74.1, 131390.0], [74.2, 131437.0], [74.3, 131444.0], [74.4, 131450.0], [74.5, 131493.0], [74.6, 131538.0], [74.7, 131550.0], [74.8, 131552.0], [74.9, 131572.0], [75.0, 131580.0], [75.1, 131583.0], [75.2, 131593.0], [75.3, 131600.0], [75.4, 131613.0], [75.5, 131667.0], [75.6, 131689.0], [75.7, 131689.0], [75.8, 131709.0], [75.9, 131731.0], [76.0, 131737.0], [76.1, 131777.0], [76.2, 131779.0], [76.3, 131786.0], [76.4, 131821.0], [76.5, 131863.0], [76.6, 131905.0], [76.7, 131968.0], [76.8, 131968.0], [76.9, 131972.0], [77.0, 131975.0], [77.1, 132000.0], [77.2, 132035.0], [77.3, 132087.0], [77.4, 132100.0], [77.5, 132109.0], [77.6, 132144.0], [77.7, 132163.0], [77.8, 132223.0], [77.9, 132267.0], [78.0, 132309.0], [78.1, 132342.0], [78.2, 132384.0], [78.3, 132396.0], [78.4, 132416.0], [78.5, 132446.0], [78.6, 132450.0], [78.7, 132462.0], [78.8, 132487.0], [78.9, 132578.0], [79.0, 132613.0], [79.1, 132674.0], [79.2, 132828.0], [79.3, 132831.0], [79.4, 132834.0], [79.5, 132836.0], [79.6, 132840.0], [79.7, 132866.0], [79.8, 132877.0], [79.9, 132883.0], [80.0, 132892.0], [80.1, 132897.0], [80.2, 132912.0], [80.3, 132924.0], [80.4, 132925.0], [80.5, 132926.0], [80.6, 132940.0], [80.7, 132949.0], [80.8, 132950.0], [80.9, 132951.0], [81.0, 132952.0], [81.1, 132956.0], [81.2, 132957.0], [81.3, 132968.0], [81.4, 132979.0], [81.5, 132980.0], [81.6, 132982.0], [81.7, 132982.0], [81.8, 132987.0], [81.9, 132991.0], [82.0, 132991.0], [82.1, 132991.0], [82.2, 133002.0], [82.3, 133003.0], [82.4, 133005.0], [82.5, 133005.0], [82.6, 133013.0], [82.7, 133015.0], [82.8, 133018.0], [82.9, 133020.0], [83.0, 133026.0], [83.1, 133033.0], [83.2, 133034.0], [83.3, 133037.0], [83.4, 133040.0], [83.5, 133040.0], [83.6, 133040.0], [83.7, 133045.0], [83.8, 133050.0], [83.9, 133052.0], [84.0, 133053.0], [84.1, 133057.0], [84.2, 133064.0], [84.3, 133068.0], [84.4, 133072.0], [84.5, 133072.0], [84.6, 133073.0], [84.7, 133077.0], [84.8, 133079.0], [84.9, 133082.0], [85.0, 133084.0], [85.1, 133085.0], [85.2, 133089.0], [85.3, 133090.0], [85.4, 133092.0], [85.5, 133092.0], [85.6, 133096.0], [85.7, 133098.0], [85.8, 133098.0], [85.9, 133099.0], [86.0, 133101.0], [86.1, 133105.0], [86.2, 133107.0], [86.3, 133114.0], [86.4, 133115.0], [86.5, 133117.0], [86.6, 133118.0], [86.7, 133122.0], [86.8, 133127.0], [86.9, 133128.0], [87.0, 133128.0], [87.1, 133131.0], [87.2, 133132.0], [87.3, 133133.0], [87.4, 133133.0], [87.5, 133140.0], [87.6, 133144.0], [87.7, 133147.0], [87.8, 133150.0], [87.9, 133150.0], [88.0, 133151.0], [88.1, 133152.0], [88.2, 133154.0], [88.3, 133155.0], [88.4, 133155.0], [88.5, 133155.0], [88.6, 133156.0], [88.7, 133161.0], [88.8, 133167.0], [88.9, 133167.0], [89.0, 133169.0], [89.1, 133174.0], [89.2, 133175.0], [89.3, 133176.0], [89.4, 133177.0], [89.5, 133181.0], [89.6, 133182.0], [89.7, 133185.0], [89.8, 133185.0], [89.9, 133193.0], [90.0, 133208.0], [90.1, 133210.0], [90.2, 133213.0], [90.3, 133219.0], [90.4, 133220.0], [90.5, 133225.0], [90.6, 133226.0], [90.7, 133226.0], [90.8, 133233.0], [90.9, 133239.0], [91.0, 133239.0], [91.1, 133242.0], [91.2, 133252.0], [91.3, 133252.0], [91.4, 133254.0], [91.5, 133255.0], [91.6, 133256.0], [91.7, 133258.0], [91.8, 133266.0], [91.9, 133267.0], [92.0, 133271.0], [92.1, 133278.0], [92.2, 133281.0], [92.3, 133281.0], [92.4, 133293.0], [92.5, 133297.0], [92.6, 133302.0], [92.7, 133312.0], [92.8, 133313.0], [92.9, 133323.0], [93.0, 133329.0], [93.1, 133338.0], [93.2, 133342.0], [93.3, 133349.0], [93.4, 133368.0], [93.5, 133370.0], [93.6, 133372.0], [93.7, 133376.0], [93.8, 133377.0], [93.9, 133385.0], [94.0, 133405.0], [94.1, 133419.0], [94.2, 133423.0], [94.3, 133442.0], [94.4, 133467.0], [94.5, 133493.0], [94.6, 133501.0], [94.7, 133504.0], [94.8, 133505.0], [94.9, 133518.0], [95.0, 133567.0], [95.1, 133585.0], [95.2, 133602.0], [95.3, 133620.0], [95.4, 133711.0], [95.5, 133715.0], [95.6, 133748.0], [95.7, 133760.0], [95.8, 133799.0], [95.9, 133815.0], [96.0, 133828.0], [96.1, 133833.0], [96.2, 133855.0], [96.3, 133855.0], [96.4, 133860.0], [96.5, 133906.0], [96.6, 133918.0], [96.7, 133928.0], [96.8, 133973.0], [96.9, 133999.0], [97.0, 134034.0], [97.1, 134043.0], [97.2, 134052.0], [97.3, 134096.0], [97.4, 134120.0], [97.5, 134177.0], [97.6, 134179.0], [97.7, 134228.0], [97.8, 134247.0], [97.9, 134247.0], [98.0, 134285.0], [98.1, 134405.0], [98.2, 134409.0], [98.3, 134426.0], [98.4, 134520.0], [98.5, 134523.0], [98.6, 134577.0], [98.7, 134636.0], [98.8, 134646.0], [98.9, 134665.0], [99.0, 134781.0], [99.1, 134823.0], [99.2, 149991.0], [99.3, 177296.0], [99.4, 177543.0], [99.5, 177957.0], [99.6, 179113.0], [99.7, 179271.0], [99.8, 188910.0], [99.9, 217650.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2400.0, "maxY": 40.0, "series": [{"data": [[133600.0, 2.0], [132000.0, 3.0], [131300.0, 6.0], [134500.0, 3.0], [132900.0, 20.0], [188900.0, 1.0], [66700.0, 1.0], [70700.0, 5.0], [69900.0, 2.0], [71500.0, 1.0], [112300.0, 1.0], [129900.0, 4.0], [133800.0, 6.0], [132200.0, 2.0], [131500.0, 8.0], [133100.0, 40.0], [134700.0, 1.0], [36500.0, 1.0], [35300.0, 1.0], [37300.0, 3.0], [36900.0, 2.0], [37700.0, 6.0], [38100.0, 1.0], [39700.0, 1.0], [177900.0, 1.0], [55700.0, 1.0], [69000.0, 1.0], [70600.0, 2.0], [69800.0, 1.0], [104200.0, 1.0], [129800.0, 5.0], [130600.0, 2.0], [132400.0, 5.0], [134000.0, 4.0], [177200.0, 1.0], [131700.0, 6.0], [133300.0, 14.0], [2400.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [2900.0, 2.0], [3000.0, 1.0], [3100.0, 2.0], [3300.0, 5.0], [3200.0, 1.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 11.0], [3700.0, 4.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 6.0], [4300.0, 9.0], [4200.0, 10.0], [68900.0, 3.0], [4100.0, 8.0], [4400.0, 7.0], [4600.0, 13.0], [4500.0, 7.0], [70500.0, 2.0], [69700.0, 1.0], [73700.0, 1.0], [4800.0, 8.0], [74500.0, 1.0], [4700.0, 6.0], [4900.0, 10.0], [80100.0, 1.0], [5100.0, 10.0], [5000.0, 9.0], [5300.0, 7.0], [5200.0, 6.0], [5400.0, 16.0], [5500.0, 10.0], [5600.0, 7.0], [5800.0, 7.0], [5700.0, 8.0], [6100.0, 9.0], [5900.0, 12.0], [6000.0, 5.0], [6300.0, 7.0], [6200.0, 6.0], [6500.0, 5.0], [6400.0, 9.0], [6600.0, 4.0], [6700.0, 7.0], [6800.0, 7.0], [6900.0, 5.0], [7000.0, 5.0], [7100.0, 4.0], [7300.0, 10.0], [7200.0, 2.0], [7400.0, 1.0], [7600.0, 7.0], [7500.0, 3.0], [7900.0, 9.0], [7700.0, 9.0], [7800.0, 5.0], [130500.0, 2.0], [8100.0, 3.0], [8000.0, 4.0], [129700.0, 1.0], [8600.0, 4.0], [8400.0, 4.0], [8700.0, 9.0], [134200.0, 4.0], [8500.0, 7.0], [132600.0, 2.0], [8200.0, 4.0], [8300.0, 4.0], [9200.0, 1.0], [8900.0, 2.0], [9000.0, 1.0], [8800.0, 2.0], [9100.0, 3.0], [9500.0, 6.0], [9300.0, 4.0], [9600.0, 2.0], [9400.0, 1.0], [9700.0, 1.0], [9900.0, 2.0], [10100.0, 2.0], [10000.0, 1.0], [10300.0, 1.0], [10600.0, 2.0], [11200.0, 3.0], [11100.0, 2.0], [10900.0, 1.0], [10800.0, 1.0], [11600.0, 2.0], [11300.0, 4.0], [11700.0, 1.0], [11500.0, 4.0], [11900.0, 1.0], [12200.0, 7.0], [12100.0, 4.0], [12000.0, 2.0], [11800.0, 2.0], [12400.0, 5.0], [12600.0, 5.0], [12300.0, 2.0], [12700.0, 2.0], [12500.0, 2.0], [13200.0, 2.0], [12900.0, 4.0], [13100.0, 2.0], [13000.0, 4.0], [12800.0, 1.0], [13300.0, 2.0], [13600.0, 2.0], [13700.0, 2.0], [13400.0, 1.0], [13800.0, 1.0], [14000.0, 3.0], [14200.0, 2.0], [13900.0, 2.0], [14400.0, 1.0], [14600.0, 2.0], [14700.0, 1.0], [15800.0, 1.0], [18000.0, 1.0], [19000.0, 2.0], [18600.0, 1.0], [19400.0, 1.0], [20200.0, 2.0], [20000.0, 4.0], [19800.0, 2.0], [21200.0, 2.0], [20800.0, 5.0], [20600.0, 2.0], [21400.0, 1.0], [21000.0, 2.0], [21800.0, 1.0], [22400.0, 1.0], [23000.0, 1.0], [24000.0, 1.0], [26800.0, 1.0], [131900.0, 5.0], [133500.0, 6.0], [36400.0, 1.0], [36000.0, 2.0], [36800.0, 1.0], [37600.0, 2.0], [38000.0, 4.0], [37200.0, 1.0], [39600.0, 1.0], [47200.0, 1.0], [61200.0, 1.0], [69600.0, 2.0], [71200.0, 3.0], [72000.0, 1.0], [124800.0, 1.0], [128000.0, 1.0], [130400.0, 1.0], [129600.0, 2.0], [131200.0, 5.0], [134400.0, 3.0], [132800.0, 10.0], [179200.0, 1.0], [217600.0, 1.0], [133700.0, 5.0], [132100.0, 4.0], [69500.0, 3.0], [71100.0, 1.0], [111100.0, 2.0], [126300.0, 1.0], [130300.0, 7.0], [129500.0, 1.0], [131400.0, 4.0], [134600.0, 3.0], [133000.0, 38.0], [132300.0, 4.0], [133900.0, 5.0], [36700.0, 2.0], [37100.0, 2.0], [37500.0, 3.0], [37900.0, 3.0], [149900.0, 1.0], [40700.0, 1.0], [39900.0, 2.0], [39100.0, 1.0], [69400.0, 3.0], [68600.0, 1.0], [73400.0, 1.0], [70200.0, 2.0], [71800.0, 1.0], [131000.0, 6.0], [130200.0, 1.0], [131600.0, 5.0], [133200.0, 26.0], [134800.0, 1.0], [134100.0, 3.0], [132500.0, 1.0], [69300.0, 1.0], [70100.0, 2.0], [70900.0, 1.0], [72500.0, 1.0], [74900.0, 1.0], [121300.0, 1.0], [130900.0, 3.0], [130100.0, 2.0], [133400.0, 6.0], [131800.0, 2.0], [19100.0, 1.0], [18500.0, 1.0], [20300.0, 2.0], [20100.0, 3.0], [19900.0, 1.0], [20500.0, 3.0], [20700.0, 2.0], [20900.0, 3.0], [21300.0, 2.0], [21100.0, 4.0], [21500.0, 1.0], [21700.0, 3.0], [22500.0, 2.0], [22100.0, 1.0], [21900.0, 1.0], [23700.0, 1.0], [26700.0, 1.0], [131100.0, 9.0], [36200.0, 3.0], [36600.0, 2.0], [37400.0, 2.0], [37000.0, 2.0], [37800.0, 1.0], [38200.0, 1.0], [40600.0, 1.0], [39400.0, 1.0], [42200.0, 1.0], [177500.0, 1.0], [179100.0, 1.0], [68400.0, 1.0], [69200.0, 2.0], [70000.0, 3.0], [71600.0, 1.0], [70800.0, 1.0], [72400.0, 1.0], [110800.0, 1.0], [121200.0, 1.0], [130000.0, 4.0], [130800.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 217600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 334.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 666.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 666.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 334.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.71562362E12, "maxY": 50.0, "series": [{"data": [[1.7156241E12, 50.0], [1.7156244E12, 48.0], [1.71562446E12, 45.43999999999999], [1.7156238E12, 50.0], [1.71562476E12, 23.35294117647059], [1.71562434E12, 48.0], [1.71562368E12, 50.0], [1.71562464E12, 34.80952380952381], [1.71562374E12, 50.0], [1.7156247E12, 29.76595744680851], [1.71562404E12, 50.0], [1.71562362E12, 50.0], [1.71562458E12, 38.96], [1.71562392E12, 50.0], [1.71562488E12, 6.30769230769231], [1.71562398E12, 50.0], [1.71562494E12, 1.0], [1.71562428E12, 48.71794871794871], [1.71562386E12, 50.0], [1.71562482E12, 14.57142857142857], [1.71562416E12, 49.698113207547166], [1.71562422E12, 49.0], [1.71562452E12, 42.081632653061234]], "isOverall": false, "label": "ConTest", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562494E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2938.0, "minX": 1.0, "maxY": 84151.25, "series": [{"data": [[2.0, 3779.0], [3.0, 47148.0], [4.0, 45567.333333333336], [5.0, 3773.0], [6.0, 16862.1], [7.0, 23687.285714285714], [8.0, 6838.0], [9.0, 6813.0], [10.0, 23621.1], [11.0, 2938.0], [12.0, 36503.4], [13.0, 44743.28571428571], [14.0, 4227.0], [15.0, 53138.666666666664], [16.0, 36395.6], [17.0, 48528.0], [18.0, 69632.4], [19.0, 69864.5], [20.0, 22359.25], [21.0, 14550.0], [22.0, 6554.0], [23.0, 27425.916666666664], [24.0, 19717.764705882353], [25.0, 25698.666666666668], [26.0, 46255.5], [27.0, 4265.0], [28.0, 42351.0], [29.0, 67121.5], [30.0, 69613.66666666666], [31.0, 56877.4], [33.0, 56408.85714285714], [32.0, 49990.85714285714], [35.0, 29896.666666666664], [34.0, 59697.882352941175], [37.0, 7197.0], [36.0, 39546.92307692308], [39.0, 61963.10714285714], [38.0, 50938.7857142857], [41.0, 29491.88888888889], [40.0, 45084.75], [43.0, 58153.92307692308], [42.0, 60849.399999999994], [45.0, 58925.2], [44.0, 60794.4761904762], [47.0, 5793.0], [46.0, 84151.25], [49.0, 58918.80392156864], [48.0, 60881.674796747975], [50.0, 60527.510588235265], [1.0, 66797.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[42.52399999999998, 55354.50999999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1.9333333333333333, "minX": 1.71562362E12, "maxY": 1752.0166666666667, "series": [{"data": [[1.7156241E12, 909.0833333333334], [1.7156244E12, 1117.3666666666666], [1.71562446E12, 876.0], [1.7156238E12, 595.4333333333333], [1.71562476E12, 476.5833333333333], [1.71562434E12, 1029.15], [1.71562368E12, 226.65], [1.71562464E12, 605.2333333333333], [1.71562374E12, 1752.0166666666667], [1.7156247E12, 969.1166666666667], [1.71562404E12, 1167.6], [1.71562362E12, 63.7], [1.71562458E12, 976.4666666666667], [1.71562392E12, 988.7166666666667], [1.71562488E12, 296.48333333333335], [1.71562398E12, 1205.5833333333333], [1.71562494E12, 55.13333333333333], [1.71562428E12, 1049.9833333333333], [1.71562386E12, 1476.35], [1.71562482E12, 537.85], [1.71562416E12, 1084.2833333333333], [1.71562422E12, 845.3666666666667], [1.71562452E12, 923.7833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7156241E12, 52.2], [1.7156244E12, 50.266666666666666], [1.71562446E12, 67.66666666666667], [1.7156238E12, 54.13333333333333], [1.71562476E12, 85.06666666666666], [1.71562434E12, 63.8], [1.71562368E12, 54.13333333333333], [1.71562464E12, 61.86666666666667], [1.71562374E12, 52.2], [1.7156247E12, 58.0], [1.71562404E12, 48.333333333333336], [1.71562362E12, 50.266666666666666], [1.71562458E12, 63.8], [1.71562392E12, 73.46666666666667], [1.71562488E12, 67.66666666666667], [1.71562398E12, 36.733333333333334], [1.71562494E12, 1.9333333333333333], [1.71562428E12, 38.666666666666664], [1.71562386E12, 42.53333333333333], [1.71562482E12, 50.266666666666666], [1.71562416E12, 65.73333333333333], [1.71562422E12, 85.06666666666666], [1.71562452E12, 63.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562494E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14865.999999999998, "minX": 1.71562362E12, "maxY": 79953.57142857143, "series": [{"data": [[1.7156241E12, 61029.41860465116], [1.7156244E12, 70199.04347826088], [1.71562446E12, 50848.9], [1.7156238E12, 51331.23684210526], [1.71562476E12, 28902.078431372556], [1.71562434E12, 60230.00000000001], [1.71562368E12, 32322.35483870967], [1.71562464E12, 46548.357142857145], [1.71562374E12, 78312.69491525424], [1.7156247E12, 56086.93617021276], [1.71562404E12, 69135.89130434784], [1.71562362E12, 14865.999999999998], [1.71562458E12, 56259.32], [1.71562392E12, 52465.60000000001], [1.71562488E12, 19213.461538461543], [1.71562398E12, 77506.51219512196], [1.71562494E12, 66797.0], [1.71562428E12, 74479.99999999999], [1.71562386E12, 79953.57142857143], [1.71562482E12, 42594.22857142857], [1.71562416E12, 58490.773584905655], [1.71562422E12, 46806.2068965517], [1.71562452E12, 57035.1224489796]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562494E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1847.5, "minX": 1.71562362E12, "maxY": 21572.645161290322, "series": [{"data": [[1.7156241E12, 12257.023255813952], [1.7156244E12, 12350.304347826086], [1.71562446E12, 11121.019999999997], [1.7156238E12, 13075.026315789475], [1.71562476E12, 10681.352941176468], [1.71562434E12, 11515.803921568628], [1.71562368E12, 21572.645161290322], [1.71562464E12, 15056.452380952378], [1.71562374E12, 7324.966101694915], [1.7156247E12, 8182.765957446808], [1.71562404E12, 8626.521739130436], [1.71562362E12, 14865.230769230768], [1.71562458E12, 11106.239999999998], [1.71562392E12, 11665.418181818179], [1.71562488E12, 5570.871794871795], [1.71562398E12, 6317.048780487805], [1.71562494E12, 1847.5], [1.71562428E12, 9771.794871794871], [1.71562386E12, 6685.91836734694], [1.71562482E12, 8662.171428571433], [1.71562416E12, 11076.490566037737], [1.71562422E12, 14014.98275862069], [1.71562452E12, 13844.571428571426]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562494E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 12492.192307692309, "minX": 1.71562362E12, "maxY": 78870.67346938778, "series": [{"data": [[1.7156241E12, 59326.581395348825], [1.7156244E12, 68512.60869565218], [1.71562446E12, 48762.25999999999], [1.7156238E12, 49511.34210526316], [1.71562476E12, 26160.058823529416], [1.71562434E12, 58476.76470588236], [1.71562368E12, 30086.03225806451], [1.71562464E12, 44269.952380952396], [1.71562374E12, 77277.88135593219], [1.7156247E12, 54096.55319148936], [1.71562404E12, 67737.0652173913], [1.71562362E12, 12492.192307692309], [1.71562458E12, 54461.220000000016], [1.71562392E12, 50840.2], [1.71562488E12, 16362.974358974356], [1.71562398E12, 76364.17073170733], [1.71562494E12, 65241.0], [1.71562428E12, 73075.84615384614], [1.71562386E12, 78870.67346938778], [1.71562482E12, 40212.171428571426], [1.71562416E12, 56723.32075471698], [1.71562422E12, 44791.068965517254], [1.71562452E12, 55018.224489795924]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562494E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2449.0, "minX": 1.71562362E12, "maxY": 112365.0, "series": [{"data": [[1.7156241E12, 70755.0], [1.7156244E12, 71520.0], [1.71562446E12, 70771.0], [1.7156238E12, 70248.0], [1.71562476E12, 70070.0], [1.71562434E12, 71672.0], [1.71562368E12, 80162.0], [1.71562464E12, 112365.0], [1.71562374E12, 70701.0], [1.7156247E12, 38189.0], [1.71562404E12, 70570.0], [1.71562362E12, 47253.0], [1.71562458E12, 72530.0], [1.71562392E12, 70559.0], [1.71562488E12, 68962.0], [1.71562398E12, 74559.0], [1.71562494E12, 3695.0], [1.71562428E12, 70100.0], [1.71562386E12, 71172.0], [1.71562482E12, 72021.0], [1.71562416E12, 71874.0], [1.71562422E12, 70126.0], [1.71562452E12, 73703.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7156241E12, 3620.0], [1.7156244E12, 4464.0], [1.71562446E12, 4058.0], [1.7156238E12, 3235.0], [1.71562476E12, 3727.0], [1.71562434E12, 4213.0], [1.71562368E12, 2979.0], [1.71562464E12, 4205.0], [1.71562374E12, 3701.0], [1.7156247E12, 4265.0], [1.71562404E12, 3861.0], [1.71562362E12, 3624.0], [1.71562458E12, 4727.0], [1.71562392E12, 3565.0], [1.71562488E12, 2449.0], [1.71562398E12, 3038.0], [1.71562494E12, 3695.0], [1.71562428E12, 4903.0], [1.71562386E12, 3119.0], [1.71562482E12, 2938.0], [1.71562416E12, 3591.0], [1.71562422E12, 3346.0], [1.71562452E12, 4623.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7156241E12, 69423.4], [1.7156244E12, 70926.6], [1.71562446E12, 61320.39999999998], [1.7156238E12, 68558.8], [1.71562476E12, 37351.5], [1.71562434E12, 56294.60000000005], [1.71562368E12, 70566.8], [1.71562464E12, 71100.2], [1.71562374E12, 36551.4], [1.7156247E12, 37640.200000000004], [1.71562404E12, 37421.8], [1.71562362E12, 37494.2], [1.71562458E12, 32462.40000000002], [1.71562392E12, 43535.500000000044], [1.71562488E12, 6868.4], [1.71562398E12, 36781.0], [1.71562494E12, 3695.0], [1.71562428E12, 66494.10000000006], [1.71562386E12, 37460.9], [1.71562482E12, 26035.80000000001], [1.71562416E12, 38909.5], [1.71562422E12, 69383.5], [1.71562452E12, 70824.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7156241E12, 70755.0], [1.7156244E12, 71520.0], [1.71562446E12, 70771.0], [1.7156238E12, 70248.0], [1.71562476E12, 70070.0], [1.71562434E12, 71672.0], [1.71562368E12, 80162.0], [1.71562464E12, 112365.0], [1.71562374E12, 70701.0], [1.7156247E12, 38189.0], [1.71562404E12, 70570.0], [1.71562362E12, 47253.0], [1.71562458E12, 72530.0], [1.71562392E12, 70559.0], [1.71562488E12, 68962.0], [1.71562398E12, 74559.0], [1.71562494E12, 3695.0], [1.71562428E12, 70100.0], [1.71562386E12, 71172.0], [1.71562482E12, 72021.0], [1.71562416E12, 71874.0], [1.71562422E12, 70126.0], [1.71562452E12, 73703.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7156241E12, 8166.0], [1.7156244E12, 10087.0], [1.71562446E12, 8773.0], [1.7156238E12, 7191.0], [1.71562476E12, 7384.5], [1.71562434E12, 8094.0], [1.71562368E12, 8193.5], [1.71562464E12, 7795.5], [1.71562374E12, 12118.0], [1.7156247E12, 8593.5], [1.71562404E12, 11209.0], [1.71562362E12, 7835.0], [1.71562458E12, 11508.0], [1.71562392E12, 8164.5], [1.71562488E12, 4062.0], [1.71562398E12, 7297.0], [1.71562494E12, 3695.0], [1.71562428E12, 10196.0], [1.71562386E12, 7016.5], [1.71562482E12, 6360.0], [1.71562416E12, 9475.5], [1.71562422E12, 8149.0], [1.71562452E12, 8660.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7156241E12, 70242.2], [1.7156244E12, 71425.5], [1.71562446E12, 70092.59999999999], [1.7156238E12, 69936.59999999999], [1.71562476E12, 39915.25], [1.71562434E12, 70319.59999999999], [1.71562368E12, 77127.19999999998], [1.71562464E12, 86437.79999999992], [1.71562374E12, 57260.99999999993], [1.7156247E12, 38093.3], [1.71562404E12, 60714.99999999998], [1.71562362E12, 43887.39999999999], [1.71562458E12, 71319.7], [1.71562392E12, 69942.45], [1.71562488E12, 20017.19999999974], [1.71562398E12, 74559.0], [1.71562494E12, 3695.0], [1.71562428E12, 70078.2], [1.71562386E12, 66176.84999999993], [1.71562482E12, 59886.84999999995], [1.71562416E12, 70976.25], [1.71562422E12, 69947.25], [1.71562452E12, 71970.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562494E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6162.0, "minX": 1.0, "maxY": 133168.0, "series": [{"data": [[1.0, 7906.0], [2.0, 8084.5], [4.0, 6162.0], [5.0, 7969.5], [3.0, 8903.0], [6.0, 7713.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 132991.0], [2.0, 133002.5], [4.0, 133120.0], [18.0, 133165.0], [5.0, 133168.0], [3.0, 132996.5], [6.0, 132953.5], [26.0, 131383.5], [13.0, 133072.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 8902.0, "series": [{"data": [[1.0, 7906.0], [2.0, 8084.0], [4.0, 6162.0], [5.0, 7969.5], [3.0, 8902.0], [6.0, 7713.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [2.0, 0.0], [4.0, 0.0], [18.0, 0.0], [5.0, 0.0], [3.0, 0.0], [6.0, 0.0], [26.0, 0.0], [13.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71562362E12, "maxY": 1.2666666666666666, "series": [{"data": [[1.7156241E12, 0.7166666666666667], [1.7156244E12, 0.7666666666666667], [1.71562446E12, 0.75], [1.7156238E12, 0.6333333333333333], [1.71562476E12, 0.7333333333333333], [1.71562434E12, 0.85], [1.71562368E12, 0.5166666666666667], [1.71562464E12, 0.6333333333333333], [1.71562374E12, 0.9833333333333333], [1.7156247E12, 0.6666666666666666], [1.71562404E12, 0.7666666666666667], [1.71562362E12, 1.2666666666666666], [1.71562458E12, 0.7666666666666667], [1.71562392E12, 0.9166666666666666], [1.71562488E12, 0.5], [1.71562398E12, 0.6833333333333333], [1.71562494E12, 0.016666666666666666], [1.71562428E12, 0.6333333333333333], [1.71562386E12, 0.8166666666666667], [1.71562482E12, 0.43333333333333335], [1.71562416E12, 0.8666666666666667], [1.71562422E12, 0.9666666666666667], [1.71562452E12, 0.7833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562494E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71562362E12, "maxY": 0.7333333333333333, "series": [{"data": [[1.7156241E12, 0.45], [1.7156244E12, 0.43333333333333335], [1.71562446E12, 0.5833333333333334], [1.7156238E12, 0.4666666666666667], [1.71562476E12, 0.7333333333333333], [1.71562434E12, 0.55], [1.71562368E12, 0.4666666666666667], [1.71562464E12, 0.5333333333333333], [1.71562374E12, 0.45], [1.7156247E12, 0.5], [1.71562404E12, 0.4166666666666667], [1.71562362E12, 0.43333333333333335], [1.71562458E12, 0.55], [1.71562392E12, 0.6333333333333333], [1.71562488E12, 0.5833333333333334], [1.71562398E12, 0.31666666666666665], [1.71562494E12, 0.016666666666666666], [1.71562428E12, 0.3333333333333333], [1.71562386E12, 0.36666666666666664], [1.71562482E12, 0.43333333333333335], [1.71562416E12, 0.5666666666666667], [1.71562422E12, 0.7333333333333333], [1.71562452E12, 0.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7156241E12, 0.26666666666666666], [1.7156244E12, 0.3333333333333333], [1.71562446E12, 0.25], [1.7156238E12, 0.16666666666666666], [1.71562476E12, 0.11666666666666667], [1.71562434E12, 0.3], [1.71562368E12, 0.05], [1.71562464E12, 0.16666666666666666], [1.71562374E12, 0.5333333333333333], [1.7156247E12, 0.2833333333333333], [1.71562404E12, 0.35], [1.71562458E12, 0.2833333333333333], [1.71562392E12, 0.2833333333333333], [1.71562488E12, 0.06666666666666667], [1.71562398E12, 0.36666666666666664], [1.71562494E12, 0.016666666666666666], [1.71562428E12, 0.31666666666666665], [1.71562386E12, 0.45], [1.71562482E12, 0.15], [1.71562416E12, 0.31666666666666665], [1.71562422E12, 0.23333333333333334], [1.71562452E12, 0.26666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562494E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71562362E12, "maxY": 0.7333333333333333, "series": [{"data": [[1.7156241E12, 0.45], [1.7156244E12, 0.43333333333333335], [1.71562446E12, 0.5833333333333334], [1.7156238E12, 0.4666666666666667], [1.71562476E12, 0.7333333333333333], [1.71562434E12, 0.55], [1.71562368E12, 0.4666666666666667], [1.71562464E12, 0.5333333333333333], [1.71562374E12, 0.45], [1.7156247E12, 0.5], [1.71562404E12, 0.4166666666666667], [1.71562362E12, 0.43333333333333335], [1.71562458E12, 0.55], [1.71562392E12, 0.6333333333333333], [1.71562488E12, 0.5833333333333334], [1.71562398E12, 0.31666666666666665], [1.71562494E12, 0.016666666666666666], [1.71562428E12, 0.3333333333333333], [1.71562386E12, 0.36666666666666664], [1.71562482E12, 0.43333333333333335], [1.71562416E12, 0.5666666666666667], [1.71562422E12, 0.7333333333333333], [1.71562452E12, 0.55]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7156241E12, 0.26666666666666666], [1.7156244E12, 0.3333333333333333], [1.71562446E12, 0.25], [1.7156238E12, 0.16666666666666666], [1.71562476E12, 0.11666666666666667], [1.71562434E12, 0.3], [1.71562368E12, 0.05], [1.71562464E12, 0.16666666666666666], [1.71562374E12, 0.5333333333333333], [1.7156247E12, 0.2833333333333333], [1.71562404E12, 0.35], [1.71562458E12, 0.2833333333333333], [1.71562392E12, 0.2833333333333333], [1.71562488E12, 0.06666666666666667], [1.71562398E12, 0.36666666666666664], [1.71562494E12, 0.016666666666666666], [1.71562428E12, 0.31666666666666665], [1.71562386E12, 0.45], [1.71562482E12, 0.15], [1.71562416E12, 0.31666666666666665], [1.71562422E12, 0.23333333333333334], [1.71562452E12, 0.26666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562494E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71562362E12, "maxY": 0.7333333333333333, "series": [{"data": [[1.7156241E12, 0.45], [1.7156244E12, 0.43333333333333335], [1.71562446E12, 0.5833333333333334], [1.7156238E12, 0.4666666666666667], [1.71562476E12, 0.7333333333333333], [1.71562434E12, 0.55], [1.71562368E12, 0.4666666666666667], [1.71562464E12, 0.5333333333333333], [1.71562374E12, 0.45], [1.7156247E12, 0.5], [1.71562404E12, 0.4166666666666667], [1.71562362E12, 0.43333333333333335], [1.71562458E12, 0.55], [1.71562392E12, 0.6333333333333333], [1.71562488E12, 0.5833333333333334], [1.71562398E12, 0.31666666666666665], [1.71562494E12, 0.016666666666666666], [1.71562428E12, 0.3333333333333333], [1.71562386E12, 0.36666666666666664], [1.71562482E12, 0.43333333333333335], [1.71562416E12, 0.5666666666666667], [1.71562422E12, 0.7333333333333333], [1.71562452E12, 0.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7156241E12, 0.26666666666666666], [1.7156244E12, 0.3333333333333333], [1.71562446E12, 0.25], [1.7156238E12, 0.16666666666666666], [1.71562476E12, 0.11666666666666667], [1.71562434E12, 0.3], [1.71562368E12, 0.05], [1.71562464E12, 0.16666666666666666], [1.71562374E12, 0.5333333333333333], [1.7156247E12, 0.2833333333333333], [1.71562404E12, 0.35], [1.71562458E12, 0.2833333333333333], [1.71562392E12, 0.2833333333333333], [1.71562488E12, 0.06666666666666667], [1.71562398E12, 0.36666666666666664], [1.71562494E12, 0.016666666666666666], [1.71562428E12, 0.31666666666666665], [1.71562386E12, 0.45], [1.71562482E12, 0.15], [1.71562416E12, 0.31666666666666665], [1.71562422E12, 0.23333333333333334], [1.71562452E12, 0.26666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562494E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

