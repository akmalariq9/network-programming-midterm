/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 63.0, "minX": 0.0, "maxY": 201440.0, "series": [{"data": [[0.0, 63.0], [0.1, 66.0], [0.2, 68.0], [0.3, 68.0], [0.4, 69.0], [0.5, 71.0], [0.6, 72.0], [0.7, 74.0], [0.8, 74.0], [0.9, 75.0], [1.0, 75.0], [1.1, 76.0], [1.2, 77.0], [1.3, 78.0], [1.4, 78.0], [1.5, 79.0], [1.6, 80.0], [1.7, 80.0], [1.8, 81.0], [1.9, 83.0], [2.0, 84.0], [2.1, 84.0], [2.2, 85.0], [2.3, 85.0], [2.4, 86.0], [2.5, 87.0], [2.6, 88.0], [2.7, 88.0], [2.8, 90.0], [2.9, 90.0], [3.0, 91.0], [3.1, 92.0], [3.2, 94.0], [3.3, 97.0], [3.4, 98.0], [3.5, 102.0], [3.6, 102.0], [3.7, 104.0], [3.8, 106.0], [3.9, 108.0], [4.0, 109.0], [4.1, 111.0], [4.2, 112.0], [4.3, 117.0], [4.4, 128.0], [4.5, 129.0], [4.6, 129.0], [4.7, 130.0], [4.8, 130.0], [4.9, 130.0], [5.0, 132.0], [5.1, 133.0], [5.2, 133.0], [5.3, 135.0], [5.4, 136.0], [5.5, 140.0], [5.6, 140.0], [5.7, 142.0], [5.8, 144.0], [5.9, 147.0], [6.0, 149.0], [6.1, 149.0], [6.2, 156.0], [6.3, 156.0], [6.4, 164.0], [6.5, 165.0], [6.6, 168.0], [6.7, 174.0], [6.8, 177.0], [6.9, 178.0], [7.0, 179.0], [7.1, 180.0], [7.2, 181.0], [7.3, 182.0], [7.4, 183.0], [7.5, 183.0], [7.6, 185.0], [7.7, 185.0], [7.8, 186.0], [7.9, 187.0], [8.0, 188.0], [8.1, 190.0], [8.2, 195.0], [8.3, 195.0], [8.4, 197.0], [8.5, 199.0], [8.6, 200.0], [8.7, 201.0], [8.8, 202.0], [8.9, 203.0], [9.0, 204.0], [9.1, 206.0], [9.2, 211.0], [9.3, 213.0], [9.4, 218.0], [9.5, 225.0], [9.6, 231.0], [9.7, 233.0], [9.8, 234.0], [9.9, 236.0], [10.0, 243.0], [10.1, 249.0], [10.2, 250.0], [10.3, 252.0], [10.4, 257.0], [10.5, 259.0], [10.6, 263.0], [10.7, 265.0], [10.8, 271.0], [10.9, 272.0], [11.0, 273.0], [11.1, 274.0], [11.2, 276.0], [11.3, 278.0], [11.4, 279.0], [11.5, 282.0], [11.6, 284.0], [11.7, 285.0], [11.8, 288.0], [11.9, 289.0], [12.0, 289.0], [12.1, 289.0], [12.2, 289.0], [12.3, 290.0], [12.4, 291.0], [12.5, 292.0], [12.6, 296.0], [12.7, 298.0], [12.8, 298.0], [12.9, 298.0], [13.0, 299.0], [13.1, 300.0], [13.2, 301.0], [13.3, 302.0], [13.4, 304.0], [13.5, 306.0], [13.6, 307.0], [13.7, 307.0], [13.8, 307.0], [13.9, 309.0], [14.0, 313.0], [14.1, 314.0], [14.2, 316.0], [14.3, 317.0], [14.4, 319.0], [14.5, 319.0], [14.6, 320.0], [14.7, 321.0], [14.8, 321.0], [14.9, 323.0], [15.0, 327.0], [15.1, 329.0], [15.2, 329.0], [15.3, 331.0], [15.4, 331.0], [15.5, 335.0], [15.6, 336.0], [15.7, 339.0], [15.8, 339.0], [15.9, 348.0], [16.0, 350.0], [16.1, 353.0], [16.2, 355.0], [16.3, 355.0], [16.4, 356.0], [16.5, 356.0], [16.6, 356.0], [16.7, 359.0], [16.8, 360.0], [16.9, 361.0], [17.0, 361.0], [17.1, 362.0], [17.2, 362.0], [17.3, 363.0], [17.4, 367.0], [17.5, 375.0], [17.6, 375.0], [17.7, 377.0], [17.8, 382.0], [17.9, 385.0], [18.0, 386.0], [18.1, 386.0], [18.2, 388.0], [18.3, 389.0], [18.4, 390.0], [18.5, 393.0], [18.6, 398.0], [18.7, 398.0], [18.8, 400.0], [18.9, 401.0], [19.0, 401.0], [19.1, 402.0], [19.2, 404.0], [19.3, 406.0], [19.4, 408.0], [19.5, 409.0], [19.6, 413.0], [19.7, 414.0], [19.8, 417.0], [19.9, 418.0], [20.0, 419.0], [20.1, 420.0], [20.2, 420.0], [20.3, 421.0], [20.4, 421.0], [20.5, 422.0], [20.6, 423.0], [20.7, 424.0], [20.8, 426.0], [20.9, 427.0], [21.0, 428.0], [21.1, 432.0], [21.2, 432.0], [21.3, 432.0], [21.4, 437.0], [21.5, 439.0], [21.6, 439.0], [21.7, 441.0], [21.8, 442.0], [21.9, 447.0], [22.0, 447.0], [22.1, 448.0], [22.2, 448.0], [22.3, 452.0], [22.4, 453.0], [22.5, 456.0], [22.6, 458.0], [22.7, 459.0], [22.8, 461.0], [22.9, 462.0], [23.0, 462.0], [23.1, 464.0], [23.2, 467.0], [23.3, 469.0], [23.4, 470.0], [23.5, 478.0], [23.6, 479.0], [23.7, 483.0], [23.8, 483.0], [23.9, 485.0], [24.0, 487.0], [24.1, 488.0], [24.2, 489.0], [24.3, 489.0], [24.4, 489.0], [24.5, 489.0], [24.6, 495.0], [24.7, 497.0], [24.8, 499.0], [24.9, 500.0], [25.0, 500.0], [25.1, 502.0], [25.2, 502.0], [25.3, 508.0], [25.4, 509.0], [25.5, 510.0], [25.6, 510.0], [25.7, 511.0], [25.8, 514.0], [25.9, 516.0], [26.0, 517.0], [26.1, 519.0], [26.2, 526.0], [26.3, 528.0], [26.4, 532.0], [26.5, 533.0], [26.6, 534.0], [26.7, 537.0], [26.8, 541.0], [26.9, 544.0], [27.0, 544.0], [27.1, 546.0], [27.2, 547.0], [27.3, 549.0], [27.4, 550.0], [27.5, 552.0], [27.6, 553.0], [27.7, 554.0], [27.8, 558.0], [27.9, 561.0], [28.0, 563.0], [28.1, 565.0], [28.2, 566.0], [28.3, 567.0], [28.4, 569.0], [28.5, 570.0], [28.6, 571.0], [28.7, 575.0], [28.8, 577.0], [28.9, 577.0], [29.0, 579.0], [29.1, 579.0], [29.2, 585.0], [29.3, 586.0], [29.4, 588.0], [29.5, 588.0], [29.6, 589.0], [29.7, 589.0], [29.8, 590.0], [29.9, 593.0], [30.0, 597.0], [30.1, 601.0], [30.2, 602.0], [30.3, 604.0], [30.4, 605.0], [30.5, 606.0], [30.6, 609.0], [30.7, 612.0], [30.8, 612.0], [30.9, 622.0], [31.0, 626.0], [31.1, 629.0], [31.2, 632.0], [31.3, 635.0], [31.4, 635.0], [31.5, 636.0], [31.6, 638.0], [31.7, 652.0], [31.8, 655.0], [31.9, 657.0], [32.0, 660.0], [32.1, 660.0], [32.2, 662.0], [32.3, 664.0], [32.4, 673.0], [32.5, 680.0], [32.6, 683.0], [32.7, 686.0], [32.8, 694.0], [32.9, 703.0], [33.0, 704.0], [33.1, 704.0], [33.2, 706.0], [33.3, 707.0], [33.4, 710.0], [33.5, 710.0], [33.6, 712.0], [33.7, 713.0], [33.8, 717.0], [33.9, 724.0], [34.0, 728.0], [34.1, 749.0], [34.2, 753.0], [34.3, 754.0], [34.4, 756.0], [34.5, 757.0], [34.6, 757.0], [34.7, 759.0], [34.8, 759.0], [34.9, 762.0], [35.0, 770.0], [35.1, 773.0], [35.2, 777.0], [35.3, 777.0], [35.4, 779.0], [35.5, 790.0], [35.6, 790.0], [35.7, 790.0], [35.8, 791.0], [35.9, 792.0], [36.0, 794.0], [36.1, 799.0], [36.2, 800.0], [36.3, 801.0], [36.4, 804.0], [36.5, 807.0], [36.6, 822.0], [36.7, 828.0], [36.8, 840.0], [36.9, 844.0], [37.0, 852.0], [37.1, 867.0], [37.2, 872.0], [37.3, 872.0], [37.4, 879.0], [37.5, 883.0], [37.6, 884.0], [37.7, 887.0], [37.8, 895.0], [37.9, 908.0], [38.0, 911.0], [38.1, 912.0], [38.2, 918.0], [38.3, 919.0], [38.4, 920.0], [38.5, 923.0], [38.6, 924.0], [38.7, 924.0], [38.8, 934.0], [38.9, 935.0], [39.0, 937.0], [39.1, 946.0], [39.2, 948.0], [39.3, 954.0], [39.4, 961.0], [39.5, 965.0], [39.6, 968.0], [39.7, 975.0], [39.8, 981.0], [39.9, 988.0], [40.0, 990.0], [40.1, 992.0], [40.2, 1001.0], [40.3, 1006.0], [40.4, 1012.0], [40.5, 1017.0], [40.6, 1028.0], [40.7, 1028.0], [40.8, 1028.0], [40.9, 1041.0], [41.0, 1053.0], [41.1, 1055.0], [41.2, 1082.0], [41.3, 1086.0], [41.4, 1098.0], [41.5, 1098.0], [41.6, 1101.0], [41.7, 1108.0], [41.8, 1108.0], [41.9, 1113.0], [42.0, 1113.0], [42.1, 1115.0], [42.2, 1119.0], [42.3, 1120.0], [42.4, 1122.0], [42.5, 1127.0], [42.6, 1130.0], [42.7, 1137.0], [42.8, 1139.0], [42.9, 1141.0], [43.0, 1141.0], [43.1, 1157.0], [43.2, 1157.0], [43.3, 1159.0], [43.4, 1165.0], [43.5, 1175.0], [43.6, 1179.0], [43.7, 1191.0], [43.8, 1191.0], [43.9, 1193.0], [44.0, 1228.0], [44.1, 1233.0], [44.2, 1251.0], [44.3, 1252.0], [44.4, 1254.0], [44.5, 1260.0], [44.6, 1271.0], [44.7, 1280.0], [44.8, 1287.0], [44.9, 1288.0], [45.0, 1289.0], [45.1, 1290.0], [45.2, 1292.0], [45.3, 1305.0], [45.4, 1311.0], [45.5, 1321.0], [45.6, 1326.0], [45.7, 1327.0], [45.8, 1328.0], [45.9, 1331.0], [46.0, 1331.0], [46.1, 1337.0], [46.2, 1344.0], [46.3, 1344.0], [46.4, 1346.0], [46.5, 1346.0], [46.6, 1350.0], [46.7, 1352.0], [46.8, 1358.0], [46.9, 1361.0], [47.0, 1364.0], [47.1, 1369.0], [47.2, 1375.0], [47.3, 1376.0], [47.4, 1378.0], [47.5, 1387.0], [47.6, 1389.0], [47.7, 1394.0], [47.8, 1395.0], [47.9, 1400.0], [48.0, 1400.0], [48.1, 1406.0], [48.2, 1407.0], [48.3, 1411.0], [48.4, 1416.0], [48.5, 1420.0], [48.6, 1420.0], [48.7, 1422.0], [48.8, 1432.0], [48.9, 1433.0], [49.0, 1435.0], [49.1, 1436.0], [49.2, 1441.0], [49.3, 1444.0], [49.4, 1447.0], [49.5, 1453.0], [49.6, 1453.0], [49.7, 1457.0], [49.8, 1462.0], [49.9, 1467.0], [50.0, 1467.0], [50.1, 1480.0], [50.2, 1486.0], [50.3, 1497.0], [50.4, 1497.0], [50.5, 1502.0], [50.6, 1514.0], [50.7, 1517.0], [50.8, 1523.0], [50.9, 1523.0], [51.0, 1525.0], [51.1, 1528.0], [51.2, 1541.0], [51.3, 1549.0], [51.4, 1550.0], [51.5, 1575.0], [51.6, 1578.0], [51.7, 1578.0], [51.8, 1580.0], [51.9, 1580.0], [52.0, 1586.0], [52.1, 1588.0], [52.2, 1594.0], [52.3, 1599.0], [52.4, 1599.0], [52.5, 1613.0], [52.6, 1626.0], [52.7, 1626.0], [52.8, 1628.0], [52.9, 1632.0], [53.0, 1633.0], [53.1, 1635.0], [53.2, 1643.0], [53.3, 1644.0], [53.4, 1649.0], [53.5, 1662.0], [53.6, 1669.0], [53.7, 1676.0], [53.8, 1682.0], [53.9, 1692.0], [54.0, 1693.0], [54.1, 1713.0], [54.2, 1717.0], [54.3, 1736.0], [54.4, 1739.0], [54.5, 1742.0], [54.6, 1743.0], [54.7, 1788.0], [54.8, 1789.0], [54.9, 1804.0], [55.0, 1807.0], [55.1, 1808.0], [55.2, 1821.0], [55.3, 1846.0], [55.4, 1847.0], [55.5, 1853.0], [55.6, 1873.0], [55.7, 1879.0], [55.8, 1882.0], [55.9, 1892.0], [56.0, 1902.0], [56.1, 1908.0], [56.2, 1915.0], [56.3, 1925.0], [56.4, 1931.0], [56.5, 1934.0], [56.6, 1944.0], [56.7, 1945.0], [56.8, 1952.0], [56.9, 1963.0], [57.0, 1969.0], [57.1, 1970.0], [57.2, 1990.0], [57.3, 2007.0], [57.4, 2010.0], [57.5, 2024.0], [57.6, 2040.0], [57.7, 2049.0], [57.8, 2050.0], [57.9, 2072.0], [58.0, 2072.0], [58.1, 2089.0], [58.2, 2131.0], [58.3, 2150.0], [58.4, 2156.0], [58.5, 2167.0], [58.6, 2198.0], [58.7, 2228.0], [58.8, 2259.0], [58.9, 2265.0], [59.0, 2294.0], [59.1, 2319.0], [59.2, 2358.0], [59.3, 2374.0], [59.4, 2386.0], [59.5, 2470.0], [59.6, 2475.0], [59.7, 2491.0], [59.8, 2545.0], [59.9, 2593.0], [60.0, 2617.0], [60.1, 2638.0], [60.2, 2762.0], [60.3, 2786.0], [60.4, 2799.0], [60.5, 2829.0], [60.6, 2848.0], [60.7, 2858.0], [60.8, 2875.0], [60.9, 2907.0], [61.0, 2909.0], [61.1, 2950.0], [61.2, 2952.0], [61.3, 3200.0], [61.4, 3218.0], [61.5, 3227.0], [61.6, 3243.0], [61.7, 3270.0], [61.8, 3277.0], [61.9, 3280.0], [62.0, 3283.0], [62.1, 3283.0], [62.2, 3286.0], [62.3, 3286.0], [62.4, 3287.0], [62.5, 3292.0], [62.6, 3306.0], [62.7, 3309.0], [62.8, 3321.0], [62.9, 3322.0], [63.0, 3325.0], [63.1, 3325.0], [63.2, 3341.0], [63.3, 3343.0], [63.4, 3364.0], [63.5, 3369.0], [63.6, 3370.0], [63.7, 3383.0], [63.8, 3392.0], [63.9, 3393.0], [64.0, 3394.0], [64.1, 3408.0], [64.2, 3422.0], [64.3, 3430.0], [64.4, 3435.0], [64.5, 3439.0], [64.6, 3441.0], [64.7, 3445.0], [64.8, 3450.0], [64.9, 3457.0], [65.0, 3458.0], [65.1, 3468.0], [65.2, 3469.0], [65.3, 3476.0], [65.4, 3488.0], [65.5, 3492.0], [65.6, 3493.0], [65.7, 3499.0], [65.8, 3515.0], [65.9, 3532.0], [66.0, 3532.0], [66.1, 3534.0], [66.2, 3538.0], [66.3, 3548.0], [66.4, 3564.0], [66.5, 3566.0], [66.6, 3579.0], [66.7, 3580.0], [66.8, 3580.0], [66.9, 3592.0], [67.0, 3612.0], [67.1, 3653.0], [67.2, 3657.0], [67.3, 3659.0], [67.4, 3663.0], [67.5, 3683.0], [67.6, 3698.0], [67.7, 3705.0], [67.8, 3726.0], [67.9, 3728.0], [68.0, 3749.0], [68.1, 3818.0], [68.2, 3830.0], [68.3, 3842.0], [68.4, 3898.0], [68.5, 3908.0], [68.6, 3925.0], [68.7, 3939.0], [68.8, 3955.0], [68.9, 3967.0], [69.0, 3969.0], [69.1, 3991.0], [69.2, 4013.0], [69.3, 4077.0], [69.4, 4096.0], [69.5, 4242.0], [69.6, 4250.0], [69.7, 4267.0], [69.8, 4312.0], [69.9, 4377.0], [70.0, 4394.0], [70.1, 4421.0], [70.2, 4423.0], [70.3, 4425.0], [70.4, 4544.0], [70.5, 4591.0], [70.6, 4623.0], [70.7, 4695.0], [70.8, 4932.0], [70.9, 5129.0], [71.0, 5136.0], [71.1, 5139.0], [71.2, 5179.0], [71.3, 5228.0], [71.4, 5233.0], [71.5, 5240.0], [71.6, 5257.0], [71.7, 5358.0], [71.8, 5366.0], [71.9, 5434.0], [72.0, 6005.0], [72.1, 6314.0], [72.2, 6347.0], [72.3, 6693.0], [72.4, 6885.0], [72.5, 7340.0], [72.6, 7394.0], [72.7, 7416.0], [72.8, 7428.0], [72.9, 7476.0], [73.0, 7484.0], [73.1, 7486.0], [73.2, 7492.0], [73.3, 7499.0], [73.4, 7499.0], [73.5, 7502.0], [73.6, 7514.0], [73.7, 7540.0], [73.8, 7548.0], [73.9, 7552.0], [74.0, 7553.0], [74.1, 7554.0], [74.2, 7572.0], [74.3, 7587.0], [74.4, 7615.0], [74.5, 7616.0], [74.6, 7633.0], [74.7, 7664.0], [74.8, 7666.0], [74.9, 7675.0], [75.0, 7681.0], [75.1, 7807.0], [75.2, 7825.0], [75.3, 7832.0], [75.4, 7853.0], [75.5, 7921.0], [75.6, 7924.0], [75.7, 7926.0], [75.8, 8034.0], [75.9, 8040.0], [76.0, 8050.0], [76.1, 8052.0], [76.2, 8074.0], [76.3, 8218.0], [76.4, 8228.0], [76.5, 8250.0], [76.6, 8259.0], [76.7, 8290.0], [76.8, 8424.0], [76.9, 8688.0], [77.0, 8779.0], [77.1, 8943.0], [77.2, 9106.0], [77.3, 9131.0], [77.4, 9146.0], [77.5, 9396.0], [77.6, 9893.0], [77.7, 9896.0], [77.8, 10064.0], [77.9, 10282.0], [78.0, 10351.0], [78.1, 11770.0], [78.2, 12410.0], [78.3, 12472.0], [78.4, 12540.0], [78.5, 13533.0], [78.6, 14521.0], [78.7, 14760.0], [78.8, 15333.0], [78.9, 15714.0], [79.0, 15760.0], [79.1, 15762.0], [79.2, 15820.0], [79.3, 15978.0], [79.4, 16026.0], [79.5, 16070.0], [79.6, 16072.0], [79.7, 16077.0], [79.8, 16107.0], [79.9, 16195.0], [80.0, 16198.0], [80.1, 16201.0], [80.2, 16239.0], [80.3, 16271.0], [80.4, 16274.0], [80.5, 16278.0], [80.6, 16299.0], [80.7, 16324.0], [80.8, 16341.0], [80.9, 16411.0], [81.0, 16448.0], [81.1, 16475.0], [81.2, 16597.0], [81.3, 16735.0], [81.4, 16851.0], [81.5, 17077.0], [81.6, 17989.0], [81.7, 18177.0], [81.8, 18876.0], [81.9, 18878.0], [82.0, 19004.0], [82.1, 19023.0], [82.2, 20379.0], [82.3, 24138.0], [82.4, 27391.0], [82.5, 28191.0], [82.6, 28737.0], [82.7, 28936.0], [82.8, 28968.0], [82.9, 29073.0], [83.0, 29236.0], [83.1, 31783.0], [83.2, 32252.0], [83.3, 32391.0], [83.4, 32602.0], [83.5, 32730.0], [83.6, 32775.0], [83.7, 32790.0], [83.8, 32842.0], [83.9, 32988.0], [84.0, 33032.0], [84.1, 33113.0], [84.2, 33167.0], [84.3, 33252.0], [84.4, 33276.0], [84.5, 33277.0], [84.6, 43554.0], [84.7, 46801.0], [84.8, 51373.0], [84.9, 53272.0], [85.0, 53631.0], [85.1, 53641.0], [85.2, 53797.0], [85.3, 54442.0], [85.4, 55964.0], [85.5, 56095.0], [85.6, 56258.0], [85.7, 56363.0], [85.8, 59247.0], [85.9, 64086.0], [86.0, 64932.0], [86.1, 65114.0], [86.2, 65226.0], [86.3, 65309.0], [86.4, 65311.0], [86.5, 65349.0], [86.6, 65450.0], [86.7, 65471.0], [86.8, 65474.0], [86.9, 65490.0], [87.0, 65528.0], [87.1, 65625.0], [87.2, 65662.0], [87.3, 65682.0], [87.4, 65688.0], [87.5, 65693.0], [87.6, 65705.0], [87.7, 65853.0], [87.8, 65879.0], [87.9, 65884.0], [88.0, 65952.0], [88.1, 66028.0], [88.2, 66157.0], [88.3, 66204.0], [88.4, 66216.0], [88.5, 66416.0], [88.6, 66444.0], [88.7, 66929.0], [88.8, 67484.0], [88.9, 67580.0], [89.0, 71003.0], [89.1, 71026.0], [89.2, 71336.0], [89.3, 71408.0], [89.4, 71450.0], [89.5, 71560.0], [89.6, 71639.0], [89.7, 71962.0], [89.8, 72108.0], [89.9, 72108.0], [90.0, 72270.0], [90.1, 77844.0], [90.2, 78413.0], [90.3, 78674.0], [90.4, 82228.0], [90.5, 104604.0], [90.6, 104615.0], [90.7, 104621.0], [90.8, 104621.0], [90.9, 104625.0], [91.0, 104638.0], [91.1, 104642.0], [91.2, 104646.0], [91.3, 104650.0], [91.4, 104656.0], [91.5, 104665.0], [91.6, 104677.0], [91.7, 104681.0], [91.8, 104691.0], [91.9, 104694.0], [92.0, 104695.0], [92.1, 104695.0], [92.2, 104695.0], [92.3, 104695.0], [92.4, 104695.0], [92.5, 104696.0], [92.6, 104696.0], [92.7, 104696.0], [92.8, 104698.0], [92.9, 104704.0], [93.0, 104705.0], [93.1, 104705.0], [93.2, 104707.0], [93.3, 104707.0], [93.4, 104708.0], [93.5, 104708.0], [93.6, 104709.0], [93.7, 104709.0], [93.8, 104953.0], [93.9, 104969.0], [94.0, 105391.0], [94.1, 114974.0], [94.2, 122609.0], [94.3, 122628.0], [94.4, 123824.0], [94.5, 128802.0], [94.6, 129622.0], [94.7, 129660.0], [94.8, 129670.0], [94.9, 129685.0], [95.0, 129694.0], [95.1, 129702.0], [95.2, 129710.0], [95.3, 129722.0], [95.4, 129743.0], [95.5, 129756.0], [95.6, 129765.0], [95.7, 129865.0], [95.8, 130374.0], [95.9, 131184.0], [96.0, 131508.0], [96.1, 131719.0], [96.2, 133813.0], [96.3, 133826.0], [96.4, 133883.0], [96.5, 148465.0], [96.6, 148469.0], [96.7, 148475.0], [96.8, 148476.0], [96.9, 148476.0], [97.0, 148476.0], [97.1, 148479.0], [97.2, 148480.0], [97.3, 148481.0], [97.4, 148482.0], [97.5, 148483.0], [97.6, 148484.0], [97.7, 148485.0], [97.8, 148486.0], [97.9, 148486.0], [98.0, 148486.0], [98.1, 173730.0], [98.2, 173747.0], [98.3, 186616.0], [98.4, 194618.0], [98.5, 201175.0], [98.6, 201195.0], [98.7, 201195.0], [98.8, 201206.0], [98.9, 201219.0], [99.0, 201225.0], [99.1, 201231.0], [99.2, 201239.0], [99.3, 201256.0], [99.4, 201280.0], [99.5, 201356.0], [99.6, 201370.0], [99.7, 201384.0], [99.8, 201395.0], [99.9, 201440.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 60.0, "series": [{"data": [[0.0, 34.0], [173700.0, 2.0], [67500.0, 1.0], [65900.0, 1.0], [71500.0, 1.0], [71900.0, 1.0], [104700.0, 9.0], [130300.0, 1.0], [133800.0, 3.0], [186600.0, 1.0], [194600.0, 1.0], [100.0, 52.0], [33100.0, 2.0], [131500.0, 1.0], [32900.0, 1.0], [43500.0, 1.0], [201100.0, 3.0], [200.0, 45.0], [51300.0, 1.0], [53700.0, 1.0], [55900.0, 1.0], [56300.0, 1.0], [65500.0, 1.0], [64900.0, 1.0], [65300.0, 3.0], [65100.0, 1.0], [65800.0, 3.0], [66200.0, 2.0], [67400.0, 1.0], [71000.0, 2.0], [71400.0, 2.0], [72200.0, 1.0], [300.0, 57.0], [77800.0, 1.0], [78600.0, 1.0], [82200.0, 1.0], [400.0, 60.0], [104600.0, 24.0], [122600.0, 2.0], [123800.0, 1.0], [500.0, 52.0], [129800.0, 1.0], [600.0, 28.0], [148400.0, 16.0], [700.0, 33.0], [201200.0, 7.0], [800.0, 17.0], [900.0, 23.0], [1000.0, 14.0], [1100.0, 24.0], [1200.0, 13.0], [1300.0, 26.0], [1400.0, 26.0], [1500.0, 20.0], [1600.0, 16.0], [1700.0, 8.0], [1800.0, 11.0], [1900.0, 13.0], [2000.0, 9.0], [131700.0, 1.0], [2100.0, 5.0], [2300.0, 4.0], [2200.0, 4.0], [2400.0, 3.0], [2500.0, 2.0], [2600.0, 2.0], [2700.0, 3.0], [2800.0, 4.0], [2900.0, 4.0], [201300.0, 4.0], [3200.0, 13.0], [3300.0, 15.0], [3400.0, 17.0], [3500.0, 12.0], [3600.0, 7.0], [3700.0, 4.0], [3800.0, 4.0], [3900.0, 7.0], [4000.0, 3.0], [4300.0, 3.0], [4200.0, 3.0], [65700.0, 1.0], [66100.0, 1.0], [66900.0, 1.0], [4500.0, 2.0], [4600.0, 2.0], [4400.0, 3.0], [71300.0, 1.0], [72100.0, 2.0], [5100.0, 4.0], [4900.0, 1.0], [5200.0, 4.0], [5300.0, 2.0], [5400.0, 1.0], [6000.0, 1.0], [6300.0, 2.0], [6600.0, 1.0], [104900.0, 2.0], [105300.0, 1.0], [6800.0, 1.0], [7400.0, 8.0], [7300.0, 2.0], [114900.0, 1.0], [7600.0, 7.0], [7500.0, 10.0], [7900.0, 3.0], [7800.0, 4.0], [8000.0, 5.0], [129700.0, 6.0], [8200.0, 5.0], [8400.0, 1.0], [8600.0, 1.0], [8700.0, 1.0], [8900.0, 1.0], [9100.0, 3.0], [9300.0, 1.0], [9800.0, 2.0], [10000.0, 1.0], [10200.0, 1.0], [10300.0, 1.0], [11700.0, 1.0], [12400.0, 2.0], [12500.0, 1.0], [201400.0, 1.0], [13500.0, 1.0], [14700.0, 1.0], [14500.0, 1.0], [15300.0, 1.0], [15700.0, 3.0], [15800.0, 1.0], [16200.0, 6.0], [16100.0, 3.0], [16000.0, 4.0], [15900.0, 1.0], [16300.0, 2.0], [16400.0, 3.0], [16500.0, 1.0], [16700.0, 1.0], [16800.0, 1.0], [17000.0, 1.0], [17900.0, 1.0], [18100.0, 1.0], [18800.0, 2.0], [19000.0, 2.0], [20300.0, 1.0], [24100.0, 1.0], [27300.0, 1.0], [28100.0, 1.0], [28900.0, 2.0], [29200.0, 1.0], [29000.0, 1.0], [28700.0, 1.0], [31700.0, 1.0], [32200.0, 1.0], [32600.0, 1.0], [32700.0, 3.0], [32300.0, 1.0], [32800.0, 1.0], [33000.0, 1.0], [33200.0, 3.0], [131100.0, 1.0], [46800.0, 1.0], [53200.0, 1.0], [53600.0, 2.0], [54400.0, 1.0], [56000.0, 1.0], [56200.0, 1.0], [59200.0, 1.0], [64000.0, 1.0], [65200.0, 1.0], [65400.0, 4.0], [65600.0, 5.0], [66000.0, 1.0], [66400.0, 2.0], [71600.0, 1.0], [78400.0, 1.0], [129600.0, 5.0], [128800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 201400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 93.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 403.0, "series": [{"data": [[0.0, 250.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 254.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 403.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 93.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.671874999999996, "minX": 1.71565956E12, "maxY": 174.10480349344982, "series": [{"data": [[1.7156598E12, 11.671874999999996], [1.71565962E12, 110.11917098445599], [1.71565956E12, 174.10480349344982], [1.71565974E12, 33.04098360655738], [1.71565968E12, 69.69325153374236]], "isOverall": false, "label": "ConTest", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7156598E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 78.46153846153847, "minX": 1.0, "maxY": 200305.80000000005, "series": [{"data": [[2.0, 773.0], [3.0, 1046.3333333333333], [4.0, 852.0], [5.0, 5418.5], [6.0, 1006.0], [7.0, 424.0], [8.0, 1693.0], [9.0, 1912.5], [10.0, 822.0], [11.0, 2982.5], [12.0, 2801.75], [13.0, 3818.0], [14.0, 1591.0], [15.0, 2241.7999999999997], [16.0, 108128.45454545454], [17.0, 7807.0], [18.0, 1254.0], [19.0, 867.0], [20.0, 2229.8], [21.0, 704.0], [22.0, 1514.0], [23.0, 588.0], [24.0, 4743.642857142858], [25.0, 1115.0], [26.0, 1847.0], [27.0, 1467.0], [28.0, 2175.0], [29.0, 2470.0], [30.0, 3782.5], [31.0, 10738.636363636362], [33.0, 49191.25], [32.0, 200305.80000000005], [35.0, 173738.5], [34.0, 331.0], [37.0, 759.0], [36.0, 757.0], [39.0, 783.0], [38.0, 2984.5], [41.0, 975.0], [40.0, 2277.0], [43.0, 1550.0], [42.0, 924.0], [45.0, 131184.0], [44.0, 31411.666666666668], [47.0, 1055.0], [46.0, 8613.0], [49.0, 1028.0], [48.0, 16678.0], [51.0, 2055.0], [50.0, 840.0], [53.0, 2406.5], [52.0, 2294.0], [55.0, 2015.5], [54.0, 1497.0], [57.0, 10182.333333333332], [56.0, 5350.333333333333], [59.0, 426.0], [58.0, 3906.5], [61.0, 1669.0], [60.0, 1041.0], [63.0, 9655.75], [62.0, 1077.5], [67.0, 16919.5], [66.0, 2843.0], [65.0, 1191.0], [64.0, 844.0], [71.0, 4251.4], [70.0, 602.0], [69.0, 649.5], [68.0, 2037.6666666666667], [75.0, 126176.0], [74.0, 113379.08333333334], [73.0, 3652.8333333333335], [72.0, 552.0], [79.0, 74813.17647058824], [78.0, 566.6666666666666], [77.0, 620.0], [76.0, 85234.35294117648], [83.0, 65495.5], [82.0, 65879.0], [81.0, 16758.75], [80.0, 514.0], [87.0, 908.0], [86.0, 992.0], [85.0, 689.0], [84.0, 1175.5], [91.0, 26479.666666666664], [90.0, 73859.0], [89.0, 43934.333333333336], [88.0, 10726.75], [95.0, 1578.0], [94.0, 40489.5], [93.0, 9473.625000000002], [92.0, 948.0], [99.0, 833.0], [98.0, 1189.0], [97.0, 4088.5], [96.0, 934.0], [103.0, 459.0], [102.0, 33616.87500000001], [101.0, 981.0], [100.0, 33381.5], [107.0, 464.0], [106.0, 673.0], [105.0, 3749.0], [104.0, 2719.5], [111.0, 20123.0], [110.0, 1582.6666666666667], [109.0, 23634.333333333332], [108.0, 1272.5], [112.0, 452.6666666666667], [114.0, 17041.250000000004], [115.0, 13549.812500000002], [113.0, 765.0], [119.0, 532.0], [118.0, 23584.0], [117.0, 13111.8], [116.0, 40070.69999999999], [123.0, 948.6], [122.0, 1222.0], [121.0, 398.0], [120.0, 872.0], [124.0, 19676.727272727272], [125.0, 410.0], [127.0, 18840.333333333336], [126.0, 566.0], [135.0, 3403.1666666666665], [134.0, 3493.4285714285716], [133.0, 28690.333333333332], [132.0, 5709.666666666667], [131.0, 16239.0], [130.0, 475.5], [129.0, 750.3333333333334], [128.0, 15348.388888888885], [136.0, 15622.625000000002], [138.0, 255.5], [143.0, 1441.0], [142.0, 8199.714285714286], [141.0, 17605.4], [140.0, 365.42857142857144], [139.0, 463.6666666666667], [137.0, 19330.666666666664], [151.0, 4046.8333333333335], [150.0, 3564.0], [149.0, 12769.6], [148.0, 5553.333333333334], [147.0, 5246.666666666666], [146.0, 362.0], [145.0, 336.0], [144.0, 331.0], [153.0, 5571.6], [159.0, 4018.5], [158.0, 7902.666666666667], [157.0, 3030.714285714286], [156.0, 3548.0], [155.0, 8236.22222222222], [154.0, 8206.0], [152.0, 1129.5], [165.0, 197.0], [167.0, 4230.333333333334], [166.0, 4017.75], [164.0, 700.3333333333334], [163.0, 231.0], [162.0, 4997.0], [161.0, 2426.0], [160.0, 400.0], [168.0, 3780.0], [175.0, 1597.75], [174.0, 1389.25], [173.0, 1379.0], [172.0, 327.0], [171.0, 800.0], [170.0, 1331.0], [169.0, 3914.5], [180.0, 3659.454545454546], [182.0, 2131.8181818181815], [183.0, 4948.2], [181.0, 320.3333333333333], [179.0, 6005.0], [178.0, 3472.5789473684213], [177.0, 666.0], [176.0, 3587.8], [191.0, 1266.8], [190.0, 1467.0], [189.0, 1480.0], [188.0, 2610.1578947368425], [187.0, 2063.25], [186.0, 469.74999999999994], [185.0, 4711.083333333333], [184.0, 1756.6], [195.0, 1846.3333333333335], [197.0, 2070.0769230769233], [199.0, 79.0], [198.0, 1006.8500000000003], [196.0, 1141.0], [194.0, 1322.857142857143], [193.0, 2396.046511627907], [192.0, 213.0], [200.0, 78.46153846153847], [1.0, 1319.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[117.13099999999997, 19649.333000000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 92.8, "minX": 1.71565956E12, "maxY": 3162.1833333333334, "series": [{"data": [[1.7156598E12, 960.5333333333333], [1.71565962E12, 573.3166666666667], [1.71565956E12, 1122.1], [1.71565974E12, 1303.5666666666666], [1.71565968E12, 3162.1833333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7156598E12, 92.8], [1.71565962E12, 369.26666666666665], [1.71565956E12, 885.4666666666667], [1.71565974E12, 197.2], [1.71565968E12, 208.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7156598E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3547.421397379913, "minX": 1.71565956E12, "maxY": 45102.93251533742, "series": [{"data": [[1.7156598E12, 38861.21875000001], [1.71565962E12, 17792.17098445596], [1.71565956E12, 3547.421397379913], [1.71565974E12, 38949.418032786874], [1.71565968E12, 45102.93251533742]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7156598E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1741.2187499999998, "minX": 1.71565956E12, "maxY": 17088.70466321243, "series": [{"data": [[1.7156598E12, 1741.2187499999998], [1.71565962E12, 17088.70466321243], [1.71565956E12, 3547.106986899563], [1.71565974E12, 7153.5901639344265], [1.71565968E12, 6428.325153374232]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7156598E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3369.6266375545842, "minX": 1.71565956E12, "maxY": 44770.38650306748, "series": [{"data": [[1.7156598E12, 38425.59375], [1.71565962E12, 17367.906735751305], [1.71565956E12, 3369.6266375545842], [1.71565974E12, 38453.77049180328], [1.71565968E12, 44770.38650306748]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7156598E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 63.0, "minX": 1.71565956E12, "maxY": 114974.0, "series": [{"data": [[1.7156598E12, 8779.0], [1.71565962E12, 82228.0], [1.71565956E12, 33277.0], [1.71565974E12, 72270.0], [1.71565968E12, 114974.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7156598E12, 291.0], [1.71565962E12, 259.0], [1.71565956E12, 63.0], [1.71565974E12, 331.0], [1.71565968E12, 299.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7156598E12, 7692.0], [1.71565962E12, 65702.6], [1.71565956E12, 8069.600000000004], [1.71565974E12, 25650.30000000007], [1.71565968E12, 31843.800000000007]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7156598E12, 8779.0], [1.71565962E12, 78958.31999999995], [1.71565956E12, 32811.32], [1.71565974E12, 72265.14], [1.71565968E12, 114111.52999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7156598E12, 1584.0], [1.71565962E12, 948.0], [1.71565956E12, 1275.5], [1.71565974E12, 1490.5], [1.71565968E12, 1606.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7156598E12, 8400.899999999998], [1.71565962E12, 66427.2], [1.71565956E12, 16274.2], [1.71565974E12, 71443.7], [1.71565968E12, 33265.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7156598E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 91.0, "minX": 1.0, "maxY": 173738.5, "series": [{"data": [[8.0, 1649.0], [2.0, 1034.5], [35.0, 186.0], [9.0, 756.0], [39.0, 91.0], [10.0, 535.0], [12.0, 16002.0], [3.0, 1125.0], [13.0, 1400.5], [14.0, 421.0], [16.0, 3412.0], [4.0, 1393.5], [1.0, 657.0], [17.0, 420.0], [18.0, 2386.5], [19.0, 2308.5], [5.0, 1444.0], [21.0, 1344.0], [24.0, 1296.5], [6.0, 1536.0], [25.0, 1271.0], [27.0, 2848.0], [7.0, 1497.0], [29.0, 3488.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 131184.0], [8.0, 131508.0], [33.0, 104695.0], [2.0, 173738.5], [17.0, 167551.0], [14.0, 129689.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 16001.5, "series": [{"data": [[8.0, 1649.0], [2.0, 1034.5], [35.0, 186.0], [9.0, 755.0], [39.0, 91.0], [10.0, 535.0], [12.0, 16001.5], [3.0, 1125.0], [13.0, 1400.5], [14.0, 416.0], [16.0, 3411.5], [4.0, 1393.0], [1.0, 656.0], [17.0, 419.5], [18.0, 2386.5], [19.0, 2308.5], [5.0, 1444.0], [21.0, 1343.0], [24.0, 1296.5], [6.0, 1536.0], [25.0, 1271.0], [27.0, 2848.0], [7.0, 1497.0], [29.0, 3488.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [8.0, 0.0], [33.0, 0.0], [2.0, 0.0], [17.0, 0.0], [14.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.71565956E12, "maxY": 9.85, "series": [{"data": [[1.7156598E12, 0.8], [1.71565962E12, 2.316666666666667], [1.71565956E12, 9.85], [1.71565974E12, 1.5333333333333334], [1.71565968E12, 2.1666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7156598E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71565956E12, "maxY": 7.633333333333334, "series": [{"data": [[1.7156598E12, 0.8], [1.71565962E12, 3.183333333333333], [1.71565956E12, 7.633333333333334], [1.71565974E12, 1.7], [1.71565968E12, 1.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7156598E12, 0.26666666666666666], [1.71565962E12, 0.03333333333333333], [1.71565974E12, 0.3333333333333333], [1.71565968E12, 0.9166666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7156598E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71565956E12, "maxY": 7.633333333333334, "series": [{"data": [[1.7156598E12, 0.8], [1.71565962E12, 3.183333333333333], [1.71565956E12, 7.633333333333334], [1.71565974E12, 1.7], [1.71565968E12, 1.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7156598E12, 0.26666666666666666], [1.71565962E12, 0.03333333333333333], [1.71565974E12, 0.3333333333333333], [1.71565968E12, 0.9166666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7156598E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71565956E12, "maxY": 7.633333333333334, "series": [{"data": [[1.7156598E12, 0.8], [1.71565962E12, 3.183333333333333], [1.71565956E12, 7.633333333333334], [1.71565974E12, 1.7], [1.71565968E12, 1.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7156598E12, 0.26666666666666666], [1.71565962E12, 0.03333333333333333], [1.71565974E12, 0.3333333333333333], [1.71565968E12, 0.9166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7156598E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

