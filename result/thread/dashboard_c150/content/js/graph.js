/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4775.0, "minX": 0.0, "maxY": 256444.0, "series": [{"data": [[0.0, 4775.0], [0.1, 5521.0], [0.2, 5637.0], [0.3, 7004.0], [0.4, 7033.0], [0.5, 7067.0], [0.6, 7242.0], [0.7, 7979.0], [0.8, 8397.0], [0.9, 8981.0], [1.0, 9021.0], [1.1, 9238.0], [1.2, 9343.0], [1.3, 9349.0], [1.4, 9520.0], [1.5, 9753.0], [1.6, 9882.0], [1.7, 9928.0], [1.8, 10075.0], [1.9, 10224.0], [2.0, 10278.0], [2.1, 10384.0], [2.2, 10388.0], [2.3, 10403.0], [2.4, 10707.0], [2.5, 10927.0], [2.6, 10959.0], [2.7, 10983.0], [2.8, 11242.0], [2.9, 11420.0], [3.0, 11829.0], [3.1, 11873.0], [3.2, 11880.0], [3.3, 12012.0], [3.4, 12030.0], [3.5, 12070.0], [3.6, 12088.0], [3.7, 12201.0], [3.8, 12402.0], [3.9, 12530.0], [4.0, 12550.0], [4.1, 12856.0], [4.2, 12906.0], [4.3, 13116.0], [4.4, 13127.0], [4.5, 13220.0], [4.6, 13294.0], [4.7, 13338.0], [4.8, 13381.0], [4.9, 13501.0], [5.0, 13559.0], [5.1, 13785.0], [5.2, 13816.0], [5.3, 13826.0], [5.4, 13998.0], [5.5, 14063.0], [5.6, 14152.0], [5.7, 14153.0], [5.8, 14252.0], [5.9, 14258.0], [6.0, 14497.0], [6.1, 14510.0], [6.2, 14519.0], [6.3, 14549.0], [6.4, 14575.0], [6.5, 14775.0], [6.6, 14886.0], [6.7, 14944.0], [6.8, 14948.0], [6.9, 14955.0], [7.0, 15135.0], [7.1, 15164.0], [7.2, 15266.0], [7.3, 15371.0], [7.4, 15473.0], [7.5, 15515.0], [7.6, 15695.0], [7.7, 16074.0], [7.8, 16074.0], [7.9, 16199.0], [8.0, 16361.0], [8.1, 16529.0], [8.2, 17168.0], [8.3, 17169.0], [8.4, 17191.0], [8.5, 17211.0], [8.6, 17382.0], [8.7, 17465.0], [8.8, 17491.0], [8.9, 17577.0], [9.0, 17580.0], [9.1, 18279.0], [9.2, 18491.0], [9.3, 18683.0], [9.4, 18765.0], [9.5, 18771.0], [9.6, 18953.0], [9.7, 19174.0], [9.8, 19552.0], [9.9, 19568.0], [10.0, 19762.0], [10.1, 19817.0], [10.2, 19823.0], [10.3, 19843.0], [10.4, 20119.0], [10.5, 20455.0], [10.6, 20859.0], [10.7, 21361.0], [10.8, 21836.0], [10.9, 22121.0], [11.0, 22701.0], [11.1, 23589.0], [11.2, 24656.0], [11.3, 24781.0], [11.4, 24869.0], [11.5, 25543.0], [11.6, 25555.0], [11.7, 25986.0], [11.8, 26288.0], [11.9, 26728.0], [12.0, 26929.0], [12.1, 27059.0], [12.2, 27522.0], [12.3, 27754.0], [12.4, 27852.0], [12.5, 28265.0], [12.6, 28780.0], [12.7, 29020.0], [12.8, 29453.0], [12.9, 29474.0], [13.0, 29755.0], [13.1, 29891.0], [13.2, 30549.0], [13.3, 32319.0], [13.4, 35168.0], [13.5, 36780.0], [13.6, 37163.0], [13.7, 39684.0], [13.8, 40043.0], [13.9, 40324.0], [14.0, 41144.0], [14.1, 41672.0], [14.2, 41956.0], [14.3, 42565.0], [14.4, 43440.0], [14.5, 43962.0], [14.6, 44096.0], [14.7, 44440.0], [14.8, 44635.0], [14.9, 44695.0], [15.0, 44753.0], [15.1, 44784.0], [15.2, 44962.0], [15.3, 45072.0], [15.4, 45632.0], [15.5, 45953.0], [15.6, 47456.0], [15.7, 47492.0], [15.8, 47949.0], [15.9, 48229.0], [16.0, 51733.0], [16.1, 63359.0], [16.2, 68933.0], [16.3, 70440.0], [16.4, 71155.0], [16.5, 71988.0], [16.6, 73809.0], [16.7, 75363.0], [16.8, 75905.0], [16.9, 75922.0], [17.0, 76103.0], [17.1, 76380.0], [17.2, 76459.0], [17.3, 76806.0], [17.4, 76864.0], [17.5, 77044.0], [17.6, 77270.0], [17.7, 77487.0], [17.8, 77501.0], [17.9, 77573.0], [18.0, 78421.0], [18.1, 79541.0], [18.2, 80235.0], [18.3, 80667.0], [18.4, 80924.0], [18.5, 81475.0], [18.6, 81562.0], [18.7, 82814.0], [18.8, 83528.0], [18.9, 84823.0], [19.0, 86801.0], [19.1, 87730.0], [19.2, 93423.0], [19.3, 94575.0], [19.4, 99310.0], [19.5, 102286.0], [19.6, 102293.0], [19.7, 102388.0], [19.8, 102410.0], [19.9, 102426.0], [20.0, 102448.0], [20.1, 102474.0], [20.2, 102509.0], [20.3, 102590.0], [20.4, 102596.0], [20.5, 102599.0], [20.6, 102629.0], [20.7, 102658.0], [20.8, 102674.0], [20.9, 102684.0], [21.0, 102702.0], [21.1, 102740.0], [21.2, 102796.0], [21.3, 102811.0], [21.4, 102825.0], [21.5, 102841.0], [21.6, 102885.0], [21.7, 102893.0], [21.8, 106882.0], [21.9, 112118.0], [22.0, 117594.0], [22.1, 117705.0], [22.2, 117821.0], [22.3, 118309.0], [22.4, 123208.0], [22.5, 127737.0], [22.6, 129795.0], [22.7, 130099.0], [22.8, 130113.0], [22.9, 130150.0], [23.0, 130240.0], [23.1, 130265.0], [23.2, 130266.0], [23.3, 130267.0], [23.4, 130414.0], [23.5, 130524.0], [23.6, 130591.0], [23.7, 130759.0], [23.8, 130812.0], [23.9, 130892.0], [24.0, 131024.0], [24.1, 131070.0], [24.2, 131074.0], [24.3, 131188.0], [24.4, 131200.0], [24.5, 131226.0], [24.6, 131264.0], [24.7, 131295.0], [24.8, 131298.0], [24.9, 131370.0], [25.0, 131421.0], [25.1, 131497.0], [25.2, 131586.0], [25.3, 131629.0], [25.4, 131647.0], [25.5, 131658.0], [25.6, 131664.0], [25.7, 131680.0], [25.8, 131702.0], [25.9, 131715.0], [26.0, 131729.0], [26.1, 131762.0], [26.2, 131776.0], [26.3, 131776.0], [26.4, 131779.0], [26.5, 131785.0], [26.6, 131787.0], [26.7, 131790.0], [26.8, 131790.0], [26.9, 131797.0], [27.0, 131798.0], [27.1, 131809.0], [27.2, 131810.0], [27.3, 131812.0], [27.4, 131815.0], [27.5, 131822.0], [27.6, 131822.0], [27.7, 131824.0], [27.8, 131833.0], [27.9, 131844.0], [28.0, 131861.0], [28.1, 131878.0], [28.2, 131884.0], [28.3, 131889.0], [28.4, 131895.0], [28.5, 131900.0], [28.6, 131903.0], [28.7, 131907.0], [28.8, 131910.0], [28.9, 131918.0], [29.0, 131931.0], [29.1, 131945.0], [29.2, 131955.0], [29.3, 131961.0], [29.4, 131968.0], [29.5, 131973.0], [29.6, 131985.0], [29.7, 132001.0], [29.8, 132008.0], [29.9, 132027.0], [30.0, 132043.0], [30.1, 132059.0], [30.2, 132063.0], [30.3, 132082.0], [30.4, 132083.0], [30.5, 132085.0], [30.6, 132093.0], [30.7, 132106.0], [30.8, 132116.0], [30.9, 132125.0], [31.0, 132133.0], [31.1, 132149.0], [31.2, 132151.0], [31.3, 132163.0], [31.4, 132168.0], [31.5, 132178.0], [31.6, 132193.0], [31.7, 132205.0], [31.8, 132209.0], [31.9, 132221.0], [32.0, 132225.0], [32.1, 132232.0], [32.2, 132235.0], [32.3, 132238.0], [32.4, 132244.0], [32.5, 132248.0], [32.6, 132252.0], [32.7, 132253.0], [32.8, 132261.0], [32.9, 132272.0], [33.0, 132283.0], [33.1, 132288.0], [33.2, 132294.0], [33.3, 132307.0], [33.4, 132319.0], [33.5, 132326.0], [33.6, 132335.0], [33.7, 132350.0], [33.8, 132357.0], [33.9, 132361.0], [34.0, 132374.0], [34.1, 132385.0], [34.2, 132385.0], [34.3, 132392.0], [34.4, 132392.0], [34.5, 132399.0], [34.6, 132401.0], [34.7, 132403.0], [34.8, 132416.0], [34.9, 132419.0], [35.0, 132421.0], [35.1, 132428.0], [35.2, 132430.0], [35.3, 132441.0], [35.4, 132442.0], [35.5, 132446.0], [35.6, 132446.0], [35.7, 132455.0], [35.8, 132459.0], [35.9, 132464.0], [36.0, 132467.0], [36.1, 132467.0], [36.2, 132470.0], [36.3, 132476.0], [36.4, 132481.0], [36.5, 132489.0], [36.6, 132495.0], [36.7, 132497.0], [36.8, 132497.0], [36.9, 132514.0], [37.0, 132516.0], [37.1, 132516.0], [37.2, 132517.0], [37.3, 132520.0], [37.4, 132523.0], [37.5, 132525.0], [37.6, 132526.0], [37.7, 132528.0], [37.8, 132529.0], [37.9, 132534.0], [38.0, 132539.0], [38.1, 132545.0], [38.2, 132547.0], [38.3, 132548.0], [38.4, 132551.0], [38.5, 132559.0], [38.6, 132560.0], [38.7, 132561.0], [38.8, 132562.0], [38.9, 132567.0], [39.0, 132576.0], [39.1, 132580.0], [39.2, 132583.0], [39.3, 132583.0], [39.4, 132589.0], [39.5, 132601.0], [39.6, 132602.0], [39.7, 132604.0], [39.8, 132606.0], [39.9, 132607.0], [40.0, 132629.0], [40.1, 132648.0], [40.2, 132650.0], [40.3, 132652.0], [40.4, 132652.0], [40.5, 132652.0], [40.6, 132655.0], [40.7, 132656.0], [40.8, 132671.0], [40.9, 132678.0], [41.0, 132680.0], [41.1, 132681.0], [41.2, 132681.0], [41.3, 132682.0], [41.4, 132682.0], [41.5, 132682.0], [41.6, 132683.0], [41.7, 132686.0], [41.8, 132689.0], [41.9, 132692.0], [42.0, 132694.0], [42.1, 132695.0], [42.2, 132696.0], [42.3, 132696.0], [42.4, 132697.0], [42.5, 132698.0], [42.6, 132698.0], [42.7, 132700.0], [42.8, 132701.0], [42.9, 132702.0], [43.0, 132703.0], [43.1, 132703.0], [43.2, 132703.0], [43.3, 132704.0], [43.4, 132704.0], [43.5, 132705.0], [43.6, 132705.0], [43.7, 132711.0], [43.8, 132712.0], [43.9, 132715.0], [44.0, 132737.0], [44.1, 132739.0], [44.2, 132740.0], [44.3, 132745.0], [44.4, 132751.0], [44.5, 132752.0], [44.6, 132754.0], [44.7, 132757.0], [44.8, 132765.0], [44.9, 132765.0], [45.0, 132765.0], [45.1, 132768.0], [45.2, 132769.0], [45.3, 132771.0], [45.4, 132771.0], [45.5, 132771.0], [45.6, 132771.0], [45.7, 132772.0], [45.8, 132774.0], [45.9, 132775.0], [46.0, 132779.0], [46.1, 132780.0], [46.2, 132784.0], [46.3, 132784.0], [46.4, 132785.0], [46.5, 132786.0], [46.6, 132787.0], [46.7, 132787.0], [46.8, 132790.0], [46.9, 132793.0], [47.0, 132793.0], [47.1, 132796.0], [47.2, 132797.0], [47.3, 132810.0], [47.4, 132810.0], [47.5, 132812.0], [47.6, 132813.0], [47.7, 132817.0], [47.8, 132817.0], [47.9, 132822.0], [48.0, 132829.0], [48.1, 132829.0], [48.2, 132832.0], [48.3, 132834.0], [48.4, 132835.0], [48.5, 132835.0], [48.6, 132837.0], [48.7, 132837.0], [48.8, 132838.0], [48.9, 132839.0], [49.0, 132839.0], [49.1, 132841.0], [49.2, 132843.0], [49.3, 132843.0], [49.4, 132844.0], [49.5, 132846.0], [49.6, 132849.0], [49.7, 132854.0], [49.8, 132857.0], [49.9, 132858.0], [50.0, 132858.0], [50.1, 132864.0], [50.2, 132865.0], [50.3, 132867.0], [50.4, 132868.0], [50.5, 132869.0], [50.6, 132871.0], [50.7, 132871.0], [50.8, 132876.0], [50.9, 132876.0], [51.0, 132877.0], [51.1, 132878.0], [51.2, 132878.0], [51.3, 132879.0], [51.4, 132880.0], [51.5, 132881.0], [51.6, 132883.0], [51.7, 132883.0], [51.8, 132885.0], [51.9, 132885.0], [52.0, 132891.0], [52.1, 132891.0], [52.2, 132892.0], [52.3, 132894.0], [52.4, 132896.0], [52.5, 132901.0], [52.6, 132902.0], [52.7, 132903.0], [52.8, 132904.0], [52.9, 132910.0], [53.0, 132910.0], [53.1, 132911.0], [53.2, 132911.0], [53.3, 132911.0], [53.4, 132913.0], [53.5, 132917.0], [53.6, 132922.0], [53.7, 132924.0], [53.8, 132924.0], [53.9, 132925.0], [54.0, 132925.0], [54.1, 132925.0], [54.2, 132926.0], [54.3, 132932.0], [54.4, 132932.0], [54.5, 132932.0], [54.6, 132933.0], [54.7, 132934.0], [54.8, 132935.0], [54.9, 132938.0], [55.0, 132938.0], [55.1, 132941.0], [55.2, 132943.0], [55.3, 132945.0], [55.4, 132946.0], [55.5, 132949.0], [55.6, 132949.0], [55.7, 132950.0], [55.8, 132953.0], [55.9, 132955.0], [56.0, 132955.0], [56.1, 132956.0], [56.2, 132958.0], [56.3, 132958.0], [56.4, 132958.0], [56.5, 132959.0], [56.6, 132962.0], [56.7, 132965.0], [56.8, 132966.0], [56.9, 132966.0], [57.0, 132966.0], [57.1, 132966.0], [57.2, 132970.0], [57.3, 132970.0], [57.4, 132972.0], [57.5, 132974.0], [57.6, 132975.0], [57.7, 132976.0], [57.8, 132976.0], [57.9, 132976.0], [58.0, 132980.0], [58.1, 132982.0], [58.2, 132983.0], [58.3, 132984.0], [58.4, 132985.0], [58.5, 132986.0], [58.6, 132986.0], [58.7, 132987.0], [58.8, 132988.0], [58.9, 132991.0], [59.0, 132992.0], [59.1, 132992.0], [59.2, 132993.0], [59.3, 132994.0], [59.4, 132994.0], [59.5, 132995.0], [59.6, 132996.0], [59.7, 133003.0], [59.8, 133006.0], [59.9, 133007.0], [60.0, 133009.0], [60.1, 133013.0], [60.2, 133016.0], [60.3, 133017.0], [60.4, 133018.0], [60.5, 133019.0], [60.6, 133020.0], [60.7, 133020.0], [60.8, 133023.0], [60.9, 133023.0], [61.0, 133027.0], [61.1, 133028.0], [61.2, 133029.0], [61.3, 133030.0], [61.4, 133032.0], [61.5, 133032.0], [61.6, 133033.0], [61.7, 133033.0], [61.8, 133034.0], [61.9, 133035.0], [62.0, 133039.0], [62.1, 133040.0], [62.2, 133040.0], [62.3, 133040.0], [62.4, 133041.0], [62.5, 133041.0], [62.6, 133042.0], [62.7, 133043.0], [62.8, 133045.0], [62.9, 133046.0], [63.0, 133047.0], [63.1, 133052.0], [63.2, 133053.0], [63.3, 133057.0], [63.4, 133058.0], [63.5, 133060.0], [63.6, 133066.0], [63.7, 133067.0], [63.8, 133068.0], [63.9, 133070.0], [64.0, 133073.0], [64.1, 133076.0], [64.2, 133076.0], [64.3, 133077.0], [64.4, 133077.0], [64.5, 133077.0], [64.6, 133078.0], [64.7, 133079.0], [64.8, 133079.0], [64.9, 133079.0], [65.0, 133080.0], [65.1, 133080.0], [65.2, 133081.0], [65.3, 133082.0], [65.4, 133089.0], [65.5, 133089.0], [65.6, 133094.0], [65.7, 133095.0], [65.8, 133096.0], [65.9, 133099.0], [66.0, 133099.0], [66.1, 133099.0], [66.2, 133100.0], [66.3, 133101.0], [66.4, 133105.0], [66.5, 133106.0], [66.6, 133106.0], [66.7, 133106.0], [66.8, 133106.0], [66.9, 133109.0], [67.0, 133111.0], [67.1, 133112.0], [67.2, 133113.0], [67.3, 133115.0], [67.4, 133116.0], [67.5, 133116.0], [67.6, 133117.0], [67.7, 133117.0], [67.8, 133120.0], [67.9, 133122.0], [68.0, 133124.0], [68.1, 133124.0], [68.2, 133125.0], [68.3, 133126.0], [68.4, 133126.0], [68.5, 133128.0], [68.6, 133129.0], [68.7, 133132.0], [68.8, 133133.0], [68.9, 133133.0], [69.0, 133135.0], [69.1, 133138.0], [69.2, 133142.0], [69.3, 133144.0], [69.4, 133146.0], [69.5, 133147.0], [69.6, 133148.0], [69.7, 133149.0], [69.8, 133149.0], [69.9, 133149.0], [70.0, 133155.0], [70.1, 133157.0], [70.2, 133157.0], [70.3, 133158.0], [70.4, 133158.0], [70.5, 133158.0], [70.6, 133159.0], [70.7, 133159.0], [70.8, 133160.0], [70.9, 133160.0], [71.0, 133160.0], [71.1, 133161.0], [71.2, 133162.0], [71.3, 133162.0], [71.4, 133163.0], [71.5, 133163.0], [71.6, 133163.0], [71.7, 133163.0], [71.8, 133164.0], [71.9, 133164.0], [72.0, 133165.0], [72.1, 133167.0], [72.2, 133167.0], [72.3, 133170.0], [72.4, 133173.0], [72.5, 133175.0], [72.6, 133175.0], [72.7, 133176.0], [72.8, 133176.0], [72.9, 133177.0], [73.0, 133178.0], [73.1, 133179.0], [73.2, 133179.0], [73.3, 133179.0], [73.4, 133180.0], [73.5, 133180.0], [73.6, 133181.0], [73.7, 133181.0], [73.8, 133182.0], [73.9, 133182.0], [74.0, 133185.0], [74.1, 133188.0], [74.2, 133190.0], [74.3, 133192.0], [74.4, 133194.0], [74.5, 133198.0], [74.6, 133199.0], [74.7, 133201.0], [74.8, 133201.0], [74.9, 133203.0], [75.0, 133206.0], [75.1, 133207.0], [75.2, 133209.0], [75.3, 133210.0], [75.4, 133212.0], [75.5, 133212.0], [75.6, 133213.0], [75.7, 133215.0], [75.8, 133218.0], [75.9, 133220.0], [76.0, 133222.0], [76.1, 133223.0], [76.2, 133225.0], [76.3, 133225.0], [76.4, 133227.0], [76.5, 133229.0], [76.6, 133231.0], [76.7, 133231.0], [76.8, 133233.0], [76.9, 133233.0], [77.0, 133235.0], [77.1, 133236.0], [77.2, 133238.0], [77.3, 133242.0], [77.4, 133245.0], [77.5, 133247.0], [77.6, 133249.0], [77.7, 133253.0], [77.8, 133255.0], [77.9, 133259.0], [78.0, 133263.0], [78.1, 133266.0], [78.2, 133266.0], [78.3, 133266.0], [78.4, 133267.0], [78.5, 133268.0], [78.6, 133279.0], [78.7, 133285.0], [78.8, 133288.0], [78.9, 133288.0], [79.0, 133288.0], [79.1, 133291.0], [79.2, 133291.0], [79.3, 133293.0], [79.4, 133293.0], [79.5, 133294.0], [79.6, 133300.0], [79.7, 133304.0], [79.8, 133305.0], [79.9, 133307.0], [80.0, 133308.0], [80.1, 133308.0], [80.2, 133310.0], [80.3, 133313.0], [80.4, 133314.0], [80.5, 133319.0], [80.6, 133322.0], [80.7, 133328.0], [80.8, 133328.0], [80.9, 133329.0], [81.0, 133331.0], [81.1, 133337.0], [81.2, 133339.0], [81.3, 133342.0], [81.4, 133344.0], [81.5, 133345.0], [81.6, 133345.0], [81.7, 133345.0], [81.8, 133347.0], [81.9, 133349.0], [82.0, 133350.0], [82.1, 133355.0], [82.2, 133356.0], [82.3, 133357.0], [82.4, 133358.0], [82.5, 133359.0], [82.6, 133363.0], [82.7, 133366.0], [82.8, 133366.0], [82.9, 133366.0], [83.0, 133366.0], [83.1, 133367.0], [83.2, 133369.0], [83.3, 133373.0], [83.4, 133373.0], [83.5, 133376.0], [83.6, 133380.0], [83.7, 133387.0], [83.8, 133388.0], [83.9, 133389.0], [84.0, 133399.0], [84.1, 133407.0], [84.2, 133414.0], [84.3, 133415.0], [84.4, 133415.0], [84.5, 133415.0], [84.6, 133416.0], [84.7, 133416.0], [84.8, 133417.0], [84.9, 133418.0], [85.0, 133419.0], [85.1, 133419.0], [85.2, 133421.0], [85.3, 133423.0], [85.4, 133423.0], [85.5, 133425.0], [85.6, 133425.0], [85.7, 133428.0], [85.8, 133429.0], [85.9, 133431.0], [86.0, 133431.0], [86.1, 133436.0], [86.2, 133437.0], [86.3, 133437.0], [86.4, 133437.0], [86.5, 133437.0], [86.6, 133438.0], [86.7, 133443.0], [86.8, 133443.0], [86.9, 133444.0], [87.0, 133445.0], [87.1, 133447.0], [87.2, 133452.0], [87.3, 133453.0], [87.4, 133454.0], [87.5, 133458.0], [87.6, 133460.0], [87.7, 133472.0], [87.8, 133474.0], [87.9, 133475.0], [88.0, 133482.0], [88.1, 133491.0], [88.2, 133499.0], [88.3, 133499.0], [88.4, 133502.0], [88.5, 133503.0], [88.6, 133515.0], [88.7, 133516.0], [88.8, 133536.0], [88.9, 133548.0], [89.0, 133552.0], [89.1, 133553.0], [89.2, 133559.0], [89.3, 133573.0], [89.4, 133574.0], [89.5, 133576.0], [89.6, 133579.0], [89.7, 133580.0], [89.8, 133580.0], [89.9, 133596.0], [90.0, 133602.0], [90.1, 133638.0], [90.2, 133641.0], [90.3, 133641.0], [90.4, 133644.0], [90.5, 133648.0], [90.6, 133653.0], [90.7, 133688.0], [90.8, 133702.0], [90.9, 133806.0], [91.0, 133825.0], [91.1, 133831.0], [91.2, 133866.0], [91.3, 133897.0], [91.4, 133962.0], [91.5, 134045.0], [91.6, 134063.0], [91.7, 134118.0], [91.8, 134200.0], [91.9, 134215.0], [92.0, 134223.0], [92.1, 134496.0], [92.2, 134575.0], [92.3, 134624.0], [92.4, 134650.0], [92.5, 134708.0], [92.6, 134880.0], [92.7, 135014.0], [92.8, 135067.0], [92.9, 135103.0], [93.0, 135385.0], [93.1, 136495.0], [93.2, 136877.0], [93.3, 136904.0], [93.4, 137662.0], [93.5, 137779.0], [93.6, 137796.0], [93.7, 137804.0], [93.8, 137873.0], [93.9, 137896.0], [94.0, 137957.0], [94.1, 138250.0], [94.2, 138264.0], [94.3, 138307.0], [94.4, 138309.0], [94.5, 138445.0], [94.6, 138497.0], [94.7, 139478.0], [94.8, 143437.0], [94.9, 147825.0], [95.0, 148305.0], [95.1, 151497.0], [95.2, 156765.0], [95.3, 156933.0], [95.4, 159990.0], [95.5, 162340.0], [95.6, 168282.0], [95.7, 173053.0], [95.8, 173435.0], [95.9, 173700.0], [96.0, 173724.0], [96.1, 173914.0], [96.2, 174003.0], [96.3, 174027.0], [96.4, 183913.0], [96.5, 189743.0], [96.6, 194204.0], [96.7, 194245.0], [96.8, 204530.0], [96.9, 209847.0], [97.0, 215491.0], [97.1, 216670.0], [97.2, 219712.0], [97.3, 219795.0], [97.4, 219803.0], [97.5, 219906.0], [97.6, 219942.0], [97.7, 219977.0], [97.8, 219993.0], [97.9, 220040.0], [98.0, 220158.0], [98.1, 220158.0], [98.2, 220168.0], [98.3, 220168.0], [98.4, 220346.0], [98.5, 220401.0], [98.6, 224775.0], [98.7, 224855.0], [98.8, 224876.0], [98.9, 225072.0], [99.0, 225106.0], [99.1, 225134.0], [99.2, 225160.0], [99.3, 227180.0], [99.4, 244901.0], [99.5, 244953.0], [99.6, 249649.0], [99.7, 256074.0], [99.8, 256168.0], [99.9, 256189.0], [100.0, 256444.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 4700.0, "maxY": 89.0, "series": [{"data": [[132000.0, 11.0], [136800.0, 1.0], [133600.0, 9.0], [138400.0, 2.0], [220000.0, 1.0], [224800.0, 2.0], [132900.0, 75.0], [131300.0, 1.0], [134500.0, 1.0], [137700.0, 2.0], [156900.0, 1.0], [244900.0, 2.0], [256100.0, 2.0], [76300.0, 1.0], [79500.0, 1.0], [83500.0, 1.0], [102700.0, 3.0], [130700.0, 1.0], [132200.0, 17.0], [133800.0, 5.0], [143400.0, 1.0], [151400.0, 1.0], [215400.0, 1.0], [225000.0, 1.0], [133100.0, 89.0], [134700.0, 1.0], [131500.0, 1.0], [137900.0, 1.0], [42500.0, 1.0], [44900.0, 1.0], [51700.0, 1.0], [63300.0, 1.0], [73800.0, 1.0], [77000.0, 1.0], [77800.0, 1.0], [80200.0, 1.0], [102600.0, 4.0], [117800.0, 1.0], [132400.0, 24.0], [134000.0, 2.0], [174000.0, 2.0], [220400.0, 1.0], [131700.0, 14.0], [133300.0, 47.0], [219700.0, 2.0], [68900.0, 1.0], [4700.0, 1.0], [75300.0, 1.0], [76100.0, 1.0], [80900.0, 1.0], [5500.0, 1.0], [5600.0, 1.0], [94500.0, 1.0], [99300.0, 1.0], [102500.0, 4.0], [7000.0, 3.0], [112100.0, 1.0], [7200.0, 1.0], [117700.0, 1.0], [7900.0, 1.0], [129700.0, 1.0], [130500.0, 2.0], [132600.0, 34.0], [134200.0, 3.0], [8300.0, 1.0], [8900.0, 1.0], [9200.0, 1.0], [9000.0, 1.0], [9300.0, 2.0], [9700.0, 1.0], [9500.0, 1.0], [10000.0, 1.0], [9900.0, 1.0], [10200.0, 2.0], [9800.0, 1.0], [10400.0, 1.0], [10300.0, 3.0], [10700.0, 1.0], [11200.0, 1.0], [10900.0, 3.0], [11400.0, 1.0], [12000.0, 4.0], [11800.0, 3.0], [12200.0, 1.0], [12400.0, 1.0], [12500.0, 2.0], [12600.0, 1.0], [13300.0, 2.0], [13100.0, 2.0], [13200.0, 2.0], [12900.0, 1.0], [12800.0, 1.0], [13500.0, 2.0], [13800.0, 2.0], [13700.0, 1.0], [14200.0, 3.0], [14000.0, 1.0], [13900.0, 1.0], [14100.0, 2.0], [14800.0, 1.0], [14500.0, 4.0], [14700.0, 1.0], [14400.0, 1.0], [15100.0, 2.0], [14900.0, 3.0], [15300.0, 1.0], [15200.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [15600.0, 1.0], [16100.0, 1.0], [16300.0, 2.0], [16000.0, 2.0], [17400.0, 2.0], [17200.0, 1.0], [18400.0, 1.0], [18200.0, 1.0], [18600.0, 1.0], [20400.0, 1.0], [19800.0, 3.0], [19600.0, 1.0], [20800.0, 1.0], [21800.0, 1.0], [24600.0, 1.0], [24800.0, 1.0], [26200.0, 1.0], [27000.0, 1.0], [26800.0, 1.0], [28200.0, 1.0], [27800.0, 1.0], [29000.0, 1.0], [29400.0, 2.0], [29800.0, 1.0], [131900.0, 12.0], [133500.0, 16.0], [135100.0, 1.0], [138300.0, 2.0], [39600.0, 1.0], [40000.0, 1.0], [162300.0, 1.0], [41600.0, 1.0], [44400.0, 1.0], [44000.0, 1.0], [45600.0, 1.0], [219900.0, 4.0], [224700.0, 1.0], [70400.0, 1.0], [76800.0, 2.0], [78400.0, 1.0], [84800.0, 1.0], [102400.0, 5.0], [123200.0, 1.0], [130400.0, 1.0], [132800.0, 55.0], [134400.0, 2.0], [131200.0, 5.0], [137600.0, 1.0], [249600.0, 1.0], [256000.0, 1.0], [132100.0, 10.0], [136900.0, 1.0], [135300.0, 1.0], [133700.0, 1.0], [173700.0, 3.0], [189700.0, 1.0], [220100.0, 5.0], [71100.0, 1.0], [71900.0, 1.0], [75900.0, 2.0], [77500.0, 2.0], [81500.0, 1.0], [102300.0, 1.0], [117500.0, 1.0], [118300.0, 1.0], [134600.0, 2.0], [133000.0, 69.0], [131400.0, 2.0], [137800.0, 3.0], [139400.0, 1.0], [168200.0, 1.0], [173000.0, 1.0], [209800.0, 1.0], [132300.0, 14.0], [133900.0, 1.0], [36700.0, 1.0], [35100.0, 1.0], [37100.0, 1.0], [148300.0, 1.0], [40700.0, 1.0], [40300.0, 1.0], [41900.0, 1.0], [41100.0, 1.0], [44700.0, 2.0], [43900.0, 1.0], [173900.0, 1.0], [45900.0, 1.0], [47900.0, 1.0], [220300.0, 1.0], [225100.0, 3.0], [77400.0, 1.0], [80600.0, 1.0], [81400.0, 1.0], [93400.0, 1.0], [102200.0, 2.0], [131000.0, 3.0], [130200.0, 4.0], [131600.0, 5.0], [133200.0, 51.0], [134800.0, 1.0], [136400.0, 1.0], [138000.0, 1.0], [256400.0, 1.0], [132500.0, 27.0], [134100.0, 1.0], [204500.0, 1.0], [87700.0, 1.0], [112500.0, 1.0], [127700.0, 1.0], [130100.0, 2.0], [130900.0, 1.0], [131800.0, 15.0], [133400.0, 46.0], [135000.0, 2.0], [138200.0, 2.0], [147800.0, 1.0], [173400.0, 1.0], [194200.0, 2.0], [219800.0, 1.0], [216600.0, 1.0], [17100.0, 3.0], [17300.0, 1.0], [16500.0, 1.0], [17500.0, 2.0], [18700.0, 2.0], [18900.0, 1.0], [19100.0, 1.0], [20100.0, 1.0], [19500.0, 2.0], [19700.0, 1.0], [21300.0, 1.0], [22100.0, 1.0], [23500.0, 1.0], [22700.0, 1.0], [24700.0, 1.0], [25500.0, 2.0], [25900.0, 1.0], [26900.0, 1.0], [27500.0, 1.0], [26700.0, 1.0], [27700.0, 1.0], [28700.0, 1.0], [29700.0, 1.0], [30500.0, 1.0], [32300.0, 1.0], [132700.0, 48.0], [131100.0, 1.0], [159900.0, 1.0], [156700.0, 1.0], [43400.0, 1.0], [44600.0, 2.0], [45000.0, 1.0], [183900.0, 1.0], [47400.0, 2.0], [48200.0, 1.0], [50200.0, 1.0], [227100.0, 1.0], [77200.0, 1.0], [76400.0, 1.0], [82800.0, 1.0], [86800.0, 1.0], [102800.0, 5.0], [106800.0, 1.0], [130000.0, 1.0], [130800.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 256400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 204.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 846.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 204.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 846.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.71562698E12, "maxY": 150.0, "series": [{"data": [[1.71562764E12, 129.16216216216216], [1.71562734E12, 148.73214285714283], [1.71562794E12, 29.046511627906973], [1.71562728E12, 149.9047619047619], [1.71562698E12, 150.0], [1.71562788E12, 63.375], [1.71562758E12, 136.06666666666663], [1.71562752E12, 138.45038167938938], [1.71562722E12, 150.0], [1.71562782E12, 90.8452380952381], [1.71562716E12, 150.0], [1.71562776E12, 109.83870967741936], [1.71562746E12, 143.6969696969697], [1.71562806E12, 4.0], [1.7156274E12, 147.0571428571429], [1.7156271E12, 150.0], [1.7156277E12, 125.09375000000001], [1.71562704E12, 150.0], [1.715628E12, 5.5]], "isOverall": false, "label": "ConTest", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562806E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10278.0, "minX": 4.0, "maxY": 256218.75, "series": [{"data": [[4.0, 256218.75], [5.0, 189743.0], [6.0, 183913.0], [7.0, 162340.0], [8.0, 156933.0], [9.0, 156765.0], [10.0, 148305.0], [11.0, 133437.0], [12.0, 133177.0], [13.0, 133285.0], [15.0, 133114.5], [16.0, 133077.0], [18.0, 133069.0], [19.0, 133553.0], [25.0, 133308.1666666667], [26.0, 133491.0], [28.0, 133141.0], [29.0, 132892.0], [34.0, 132820.4], [38.0, 132670.75], [43.0, 132587.0], [44.0, 133116.0], [47.0, 132955.0], [46.0, 132773.5], [49.0, 147825.0], [48.0, 159990.0], [51.0, 12088.0], [50.0, 130892.0], [52.0, 133453.0], [55.0, 133328.0], [54.0, 133349.0], [57.0, 133145.5], [59.0, 14258.0], [58.0, 133502.0], [61.0, 132970.0], [60.0, 11873.0], [63.0, 42565.0], [62.0, 71474.5], [67.0, 112572.0], [66.0, 16332.0], [65.0, 121700.5], [64.0, 77573.0], [71.0, 10343.0], [70.0, 14153.0], [69.0, 132854.0], [68.0, 76380.0], [75.0, 81562.0], [74.0, 133825.0], [73.0, 146203.75], [72.0, 133702.0], [79.0, 22701.0], [78.0, 26832.0], [77.0, 109458.5], [76.0, 81475.0], [83.0, 80924.0], [82.0, 132765.0], [81.0, 25555.0], [80.0, 10278.0], [87.0, 107557.5], [86.0, 131188.0], [85.0, 131497.0], [84.0, 16529.0], [91.0, 133976.83333333334], [90.0, 12530.0], [89.0, 15135.0], [88.0, 18771.0], [95.0, 25543.0], [94.0, 26728.0], [93.0, 133547.11764705883], [92.0, 92756.5], [99.0, 21836.0], [98.0, 139478.0], [97.0, 135651.33333333334], [96.0, 136495.0], [103.0, 132839.0], [102.0, 15266.0], [101.0, 10388.0], [100.0, 41144.0], [107.0, 132255.0], [106.0, 113918.23529411767], [105.0, 14268.0], [104.0, 16074.0], [110.0, 111263.0], [109.0, 132126.5], [108.0, 51902.66666666667], [115.0, 54484.66666666667], [114.0, 117400.77777777778], [113.0, 10927.0], [112.0, 132264.5], [119.0, 55135.0], [118.0, 144579.33333333334], [117.0, 124346.66666666667], [116.0, 144917.2], [123.0, 132601.0], [122.0, 73618.33333333333], [121.0, 14497.0], [120.0, 75390.5], [127.0, 106853.14285714286], [126.0, 132580.0], [125.0, 121140.25], [124.0, 71309.5], [135.0, 73552.875], [134.0, 90706.75], [133.0, 109799.6], [132.0, 113688.66666666667], [131.0, 128367.83333333334], [130.0, 132955.0], [129.0, 111117.11111111108], [128.0, 134697.4406779661], [142.0, 156308.21428571426], [141.0, 167479.2], [140.0, 119217.77777777778], [139.0, 100065.21428571428], [138.0, 123988.19402985073], [137.0, 89771.84615384614], [136.0, 57551.66666666667], [150.0, 115653.32587859425], [149.0, 121141.73584905661], [148.0, 87598.80952380953], [147.0, 123490.09900990095], [146.0, 92323.0], [145.0, 14746.5], [144.0, 116029.8]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[129.09904761904744, 116098.56857142855]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.71562698E12, "maxY": 7280.1, "series": [{"data": [[1.71562764E12, 5245.05], [1.71562734E12, 2196.766666666667], [1.71562794E12, 2014.2166666666667], [1.71562728E12, 6085.533333333334], [1.71562698E12, 4.9], [1.71562788E12, 1083.0666666666666], [1.71562758E12, 776.7666666666667], [1.71562752E12, 5947.083333333333], [1.71562722E12, 551.3333333333334], [1.71562782E12, 3671.9], [1.71562716E12, 7280.1], [1.71562776E12, 2311.9333333333334], [1.71562746E12, 1336.6833333333334], [1.71562806E12, 210.73333333333332], [1.7156274E12, 4878.716666666666], [1.7156271E12, 89.43333333333334], [1.7156277E12, 1233.7666666666667], [1.71562704E12, 46.55], [1.715628E12, 105.36666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71562764E12, 23.2], [1.71562734E12, 29.0], [1.71562794E12, 9.666666666666666], [1.71562728E12, 21.266666666666666], [1.71562698E12, 3.8666666666666667], [1.71562788E12, 23.2], [1.71562758E12, 30.933333333333334], [1.71562752E12, 36.733333333333334], [1.71562722E12, 19.333333333333332], [1.71562782E12, 29.0], [1.71562716E12, 7.733333333333333], [1.71562776E12, 36.733333333333334], [1.71562746E12, 15.466666666666667], [1.71562806E12, 0.0], [1.7156274E12, 25.133333333333333], [1.7156271E12, 29.0], [1.7156277E12, 17.4], [1.71562704E12, 36.733333333333334], [1.715628E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562806E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8480.0, "minX": 1.71562698E12, "maxY": 256218.75, "series": [{"data": [[1.71562764E12, 122147.018018018], [1.71562734E12, 120831.89285714283], [1.71562794E12, 136114.09302325587], [1.71562728E12, 125048.49206349206], [1.71562698E12, 8480.0], [1.71562788E12, 100006.8125], [1.71562758E12, 77800.83333333333], [1.71562752E12, 114715.74809160308], [1.71562722E12, 100337.1], [1.71562782E12, 116157.7261904762], [1.71562716E12, 129682.09154929577], [1.71562776E12, 102566.08064516127], [1.71562746E12, 128608.8484848485], [1.71562806E12, 256218.75], [1.7156274E12, 120521.96190476192], [1.7156271E12, 42274.3125], [1.7156277E12, 109574.50000000001], [1.71562704E12, 19603.315789473683], [1.715628E12, 186828.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562806E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71562698E12, "maxY": 37259.3125, "series": [{"data": [[1.71562764E12, 3350.774774774775], [1.71562734E12, 4536.053571428572], [1.71562794E12, 18229.069767441862], [1.71562728E12, 2166.301587301587], [1.71562698E12, 8477.5], [1.71562788E12, 13641.656250000004], [1.71562758E12, 16716.366666666665], [1.71562752E12, 3935.7099236641225], [1.71562722E12, 22770.250000000004], [1.71562782E12, 6761.440476190474], [1.71562716E12, 689.0070422535211], [1.71562776E12, 7933.854838709676], [1.71562746E12, 10191.121212121212], [1.71562806E12, 0.0], [1.7156274E12, 3914.7809523809524], [1.7156271E12, 37259.3125], [1.7156277E12, 9857.156250000002], [1.71562704E12, 19602.947368421057], [1.715628E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562806E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3680.0, "minX": 1.71562698E12, "maxY": 256218.75, "series": [{"data": [[1.71562764E12, 121395.87387387389], [1.71562734E12, 119095.9464285714], [1.71562794E12, 135259.20930232553], [1.71562728E12, 124402.3888888889], [1.71562698E12, 3680.0], [1.71562788E12, 97535.9375], [1.71562758E12, 74303.06666666667], [1.71562752E12, 113713.56488549618], [1.71562722E12, 96855.49999999999], [1.71562782E12, 114961.69047619046], [1.71562716E12, 129474.79577464792], [1.71562776E12, 100950.51612903224], [1.71562746E12, 126785.69696969693], [1.71562806E12, 256218.75], [1.7156274E12, 119663.78095238093], [1.7156271E12, 38678.75], [1.7156277E12, 107720.74999999999], [1.71562704E12, 15910.315789473687], [1.715628E12, 186828.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562806E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4775.0, "minX": 1.71562698E12, "maxY": 162340.0, "series": [{"data": [[1.71562764E12, 77866.0], [1.71562734E12, 29020.0], [1.71562794E12, 162340.0], [1.71562728E12, 47949.0], [1.71562698E12, 8981.0], [1.71562788E12, 87730.0], [1.71562758E12, 77487.0], [1.71562752E12, 78421.0], [1.71562722E12, 93423.0], [1.71562782E12, 81475.0], [1.71562716E12, 44784.0], [1.71562776E12, 106882.0], [1.71562746E12, 82814.0], [1.7156274E12, 151497.0], [1.7156271E12, 99310.0], [1.7156277E12, 84823.0], [1.71562704E12, 44440.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71562764E12, 12644.0], [1.71562734E12, 9343.0], [1.71562794E12, 147825.0], [1.71562728E12, 13220.0], [1.71562698E12, 7979.0], [1.71562788E12, 9882.0], [1.71562758E12, 12201.0], [1.71562752E12, 8397.0], [1.71562722E12, 13127.0], [1.71562782E12, 10278.0], [1.71562716E12, 15473.0], [1.71562776E12, 10224.0], [1.71562746E12, 9021.0], [1.7156274E12, 5637.0], [1.7156271E12, 5521.0], [1.7156277E12, 9928.0], [1.71562704E12, 4775.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71562764E12, 77337.1], [1.71562734E12, 28260.4], [1.71562794E12, 162340.0], [1.71562728E12, 46693.600000000006], [1.71562698E12, 8981.0], [1.71562788E12, 84682.90000000001], [1.71562758E12, 55413.200000000026], [1.71562752E12, 77044.0], [1.71562722E12, 92433.5], [1.71562782E12, 81144.4], [1.71562716E12, 44784.0], [1.71562776E12, 45632.0], [1.71562746E12, 82814.0], [1.7156274E12, 111014.59999999996], [1.7156271E12, 84009.40000000001], [1.7156277E12, 84823.0], [1.71562704E12, 43440.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71562764E12, 77866.0], [1.71562734E12, 29020.0], [1.71562794E12, 162340.0], [1.71562728E12, 47949.0], [1.71562698E12, 8981.0], [1.71562788E12, 87730.0], [1.71562758E12, 77487.0], [1.71562752E12, 78421.0], [1.71562722E12, 93423.0], [1.71562782E12, 81475.0], [1.71562716E12, 44784.0], [1.71562776E12, 106882.0], [1.71562746E12, 82814.0], [1.7156274E12, 151497.0], [1.7156271E12, 99310.0], [1.7156277E12, 84823.0], [1.71562704E12, 44440.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71562764E12, 19063.5], [1.71562734E12, 13501.0], [1.71562794E12, 156933.0], [1.71562728E12, 17580.0], [1.71562698E12, 8480.0], [1.71562788E12, 15295.0], [1.71562758E12, 24190.5], [1.71562752E12, 15371.0], [1.71562722E12, 34408.5], [1.71562782E12, 25555.0], [1.71562716E12, 18792.0], [1.71562776E12, 17211.0], [1.71562746E12, 33966.0], [1.7156274E12, 19817.0], [1.7156271E12, 40043.0], [1.7156277E12, 19843.0], [1.71562704E12, 15164.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71562764E12, 77866.0], [1.71562734E12, 29020.0], [1.71562794E12, 162340.0], [1.71562728E12, 47949.0], [1.71562698E12, 8981.0], [1.71562788E12, 87730.0], [1.71562758E12, 77487.0], [1.71562752E12, 78421.0], [1.71562722E12, 93423.0], [1.71562782E12, 81475.0], [1.71562716E12, 44784.0], [1.71562776E12, 106882.0], [1.71562746E12, 82814.0], [1.7156274E12, 151497.0], [1.7156271E12, 99310.0], [1.7156277E12, 84823.0], [1.71562704E12, 44440.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562794E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10927.0, "minX": 1.0, "maxY": 220075.5, "series": [{"data": [[1.0, 19830.0], [2.0, 18587.0], [4.0, 17916.5], [16.0, 14944.0], [9.0, 15515.0], [5.0, 10927.0], [45.0, 11829.0], [3.0, 25269.5], [6.0, 19388.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 133158.5], [9.0, 132916.5], [10.0, 220075.5], [40.0, 133308.0], [11.0, 219803.0], [45.0, 133169.5], [3.0, 133194.0], [12.0, 132689.0], [13.0, 133126.0], [1.0, 133062.0], [4.0, 133257.0], [16.0, 133220.0], [18.0, 132761.0], [5.0, 132838.0], [82.0, 133029.5], [23.0, 102893.0], [6.0, 133277.5], [24.0, 133123.0], [105.0, 132891.0], [7.0, 133285.0], [127.0, 132224.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 127.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 25269.0, "series": [{"data": [[1.0, 19829.5], [2.0, 18587.0], [4.0, 17916.5], [16.0, 14944.0], [9.0, 15515.0], [5.0, 10927.0], [45.0, 11829.0], [3.0, 25269.0], [6.0, 19388.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [9.0, 0.0], [10.0, 0.0], [40.0, 0.0], [11.0, 0.0], [45.0, 0.0], [3.0, 0.0], [12.0, 0.0], [13.0, 0.0], [1.0, 0.0], [4.0, 0.0], [16.0, 0.0], [18.0, 0.0], [5.0, 0.0], [82.0, 0.0], [23.0, 0.0], [6.0, 0.0], [24.0, 0.0], [105.0, 0.0], [7.0, 0.0], [127.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 127.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.71562698E12, "maxY": 2.533333333333333, "series": [{"data": [[1.71562764E12, 1.75], [1.71562734E12, 0.9166666666666666], [1.71562728E12, 2.0833333333333335], [1.71562698E12, 2.533333333333333], [1.71562788E12, 0.11666666666666667], [1.71562758E12, 0.45], [1.71562752E12, 2.1166666666666667], [1.71562722E12, 0.3333333333333333], [1.71562782E12, 1.0], [1.71562716E12, 2.3666666666666667], [1.71562776E12, 0.7], [1.71562746E12, 0.45], [1.7156274E12, 1.7333333333333334], [1.7156271E12, 0.26666666666666666], [1.7156277E12, 0.36666666666666664], [1.71562704E12, 0.31666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562788E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71562698E12, "maxY": 2.3, "series": [{"data": [[1.71562764E12, 0.2], [1.71562734E12, 0.25], [1.71562794E12, 0.08333333333333333], [1.71562728E12, 0.18333333333333332], [1.71562698E12, 0.03333333333333333], [1.71562788E12, 0.2], [1.71562758E12, 0.26666666666666666], [1.71562752E12, 0.31666666666666665], [1.71562722E12, 0.16666666666666666], [1.71562782E12, 0.25], [1.71562716E12, 0.06666666666666667], [1.71562776E12, 0.31666666666666665], [1.71562746E12, 0.13333333333333333], [1.7156274E12, 0.21666666666666667], [1.7156271E12, 0.25], [1.7156277E12, 0.15], [1.71562704E12, 0.31666666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71562764E12, 1.65], [1.71562734E12, 0.6833333333333333], [1.71562794E12, 0.6333333333333333], [1.71562728E12, 1.9166666666666667], [1.71562788E12, 0.3333333333333333], [1.71562758E12, 0.23333333333333334], [1.71562752E12, 1.8666666666666667], [1.71562722E12, 0.16666666666666666], [1.71562782E12, 1.15], [1.71562716E12, 2.3], [1.71562776E12, 0.7166666666666667], [1.71562746E12, 0.4166666666666667], [1.71562806E12, 0.06666666666666667], [1.7156274E12, 1.5333333333333334], [1.7156271E12, 0.016666666666666666], [1.7156277E12, 0.38333333333333336], [1.715628E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562806E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71562698E12, "maxY": 2.3, "series": [{"data": [[1.71562764E12, 0.2], [1.71562734E12, 0.25], [1.71562794E12, 0.08333333333333333], [1.71562728E12, 0.18333333333333332], [1.71562698E12, 0.03333333333333333], [1.71562788E12, 0.2], [1.71562758E12, 0.26666666666666666], [1.71562752E12, 0.31666666666666665], [1.71562722E12, 0.16666666666666666], [1.71562782E12, 0.25], [1.71562716E12, 0.06666666666666667], [1.71562776E12, 0.31666666666666665], [1.71562746E12, 0.13333333333333333], [1.7156274E12, 0.21666666666666667], [1.7156271E12, 0.25], [1.7156277E12, 0.15], [1.71562704E12, 0.31666666666666665]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.71562764E12, 1.65], [1.71562734E12, 0.6833333333333333], [1.71562794E12, 0.6333333333333333], [1.71562728E12, 1.9166666666666667], [1.71562788E12, 0.3333333333333333], [1.71562758E12, 0.23333333333333334], [1.71562752E12, 1.8666666666666667], [1.71562722E12, 0.16666666666666666], [1.71562782E12, 1.15], [1.71562716E12, 2.3], [1.71562776E12, 0.7166666666666667], [1.71562746E12, 0.4166666666666667], [1.71562806E12, 0.06666666666666667], [1.7156274E12, 1.5333333333333334], [1.7156271E12, 0.016666666666666666], [1.7156277E12, 0.38333333333333336], [1.715628E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562806E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71562698E12, "maxY": 2.3, "series": [{"data": [[1.71562764E12, 0.2], [1.71562734E12, 0.25], [1.71562794E12, 0.08333333333333333], [1.71562728E12, 0.18333333333333332], [1.71562698E12, 0.03333333333333333], [1.71562788E12, 0.2], [1.71562758E12, 0.26666666666666666], [1.71562752E12, 0.31666666666666665], [1.71562722E12, 0.16666666666666666], [1.71562782E12, 0.25], [1.71562716E12, 0.06666666666666667], [1.71562776E12, 0.31666666666666665], [1.71562746E12, 0.13333333333333333], [1.7156274E12, 0.21666666666666667], [1.7156271E12, 0.25], [1.7156277E12, 0.15], [1.71562704E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71562764E12, 1.65], [1.71562734E12, 0.6833333333333333], [1.71562794E12, 0.6333333333333333], [1.71562728E12, 1.9166666666666667], [1.71562788E12, 0.3333333333333333], [1.71562758E12, 0.23333333333333334], [1.71562752E12, 1.8666666666666667], [1.71562722E12, 0.16666666666666666], [1.71562782E12, 1.15], [1.71562716E12, 2.3], [1.71562776E12, 0.7166666666666667], [1.71562746E12, 0.4166666666666667], [1.71562806E12, 0.06666666666666667], [1.7156274E12, 1.5333333333333334], [1.7156271E12, 0.016666666666666666], [1.7156277E12, 0.38333333333333336], [1.715628E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562806E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

