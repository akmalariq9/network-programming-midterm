/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3192.0, "minX": 0.0, "maxY": 252244.0, "series": [{"data": [[0.0, 3192.0], [0.1, 3224.0], [0.2, 3385.0], [0.3, 3385.0], [0.4, 4540.0], [0.5, 4554.0], [0.6, 4707.0], [0.7, 4988.0], [0.8, 5137.0], [0.9, 5293.0], [1.0, 5340.0], [1.1, 5359.0], [1.2, 5373.0], [1.3, 5442.0], [1.4, 5442.0], [1.5, 5459.0], [1.6, 5536.0], [1.7, 5551.0], [1.8, 5559.0], [1.9, 5566.0], [2.0, 5652.0], [2.1, 5656.0], [2.2, 5687.0], [2.3, 5760.0], [2.4, 5781.0], [2.5, 5906.0], [2.6, 5942.0], [2.7, 5988.0], [2.8, 5991.0], [2.9, 5992.0], [3.0, 6000.0], [3.1, 6043.0], [3.2, 6060.0], [3.3, 6064.0], [3.4, 6088.0], [3.5, 6110.0], [3.6, 6110.0], [3.7, 6199.0], [3.8, 6205.0], [3.9, 6210.0], [4.0, 6210.0], [4.1, 6309.0], [4.2, 6349.0], [4.3, 6353.0], [4.4, 6434.0], [4.5, 6454.0], [4.6, 6466.0], [4.7, 6470.0], [4.8, 6514.0], [4.9, 6541.0], [5.0, 6550.0], [5.1, 6571.0], [5.2, 6603.0], [5.3, 6615.0], [5.4, 6621.0], [5.5, 6639.0], [5.6, 6677.0], [5.7, 6692.0], [5.8, 6695.0], [5.9, 6700.0], [6.0, 6708.0], [6.1, 6746.0], [6.2, 6748.0], [6.3, 6858.0], [6.4, 6880.0], [6.5, 6880.0], [6.6, 6912.0], [6.7, 6914.0], [6.8, 6919.0], [6.9, 6945.0], [7.0, 6993.0], [7.1, 7010.0], [7.2, 7013.0], [7.3, 7028.0], [7.4, 7041.0], [7.5, 7041.0], [7.6, 7099.0], [7.7, 7235.0], [7.8, 7241.0], [7.9, 7252.0], [8.0, 7254.0], [8.1, 7263.0], [8.2, 7263.0], [8.3, 7267.0], [8.4, 7267.0], [8.5, 7282.0], [8.6, 7288.0], [8.7, 7311.0], [8.8, 7320.0], [8.9, 7362.0], [9.0, 7405.0], [9.1, 7437.0], [9.2, 7437.0], [9.3, 7457.0], [9.4, 7483.0], [9.5, 7509.0], [9.6, 7561.0], [9.7, 7599.0], [9.8, 7608.0], [9.9, 7627.0], [10.0, 7659.0], [10.1, 7662.0], [10.2, 7671.0], [10.3, 7697.0], [10.4, 7701.0], [10.5, 7704.0], [10.6, 7746.0], [10.7, 7880.0], [10.8, 7881.0], [10.9, 7886.0], [11.0, 7981.0], [11.1, 8007.0], [11.2, 8016.0], [11.3, 8037.0], [11.4, 8057.0], [11.5, 8096.0], [11.6, 8125.0], [11.7, 8162.0], [11.8, 8196.0], [11.9, 8247.0], [12.0, 8372.0], [12.1, 8389.0], [12.2, 8406.0], [12.3, 8475.0], [12.4, 8487.0], [12.5, 8493.0], [12.6, 8529.0], [12.7, 8552.0], [12.8, 8571.0], [12.9, 8614.0], [13.0, 8716.0], [13.1, 8724.0], [13.2, 8757.0], [13.3, 8770.0], [13.4, 8815.0], [13.5, 8828.0], [13.6, 8830.0], [13.7, 8842.0], [13.8, 8900.0], [13.9, 8902.0], [14.0, 9067.0], [14.1, 9073.0], [14.2, 9181.0], [14.3, 9229.0], [14.4, 9248.0], [14.5, 9438.0], [14.6, 9444.0], [14.7, 9453.0], [14.8, 9458.0], [14.9, 9467.0], [15.0, 9512.0], [15.1, 9517.0], [15.2, 9530.0], [15.3, 9562.0], [15.4, 9636.0], [15.5, 9660.0], [15.6, 9669.0], [15.7, 9730.0], [15.8, 9761.0], [15.9, 9764.0], [16.0, 9767.0], [16.1, 9794.0], [16.2, 9807.0], [16.3, 9857.0], [16.4, 9897.0], [16.5, 9917.0], [16.6, 9934.0], [16.7, 10018.0], [16.8, 10027.0], [16.9, 10033.0], [17.0, 10170.0], [17.1, 10190.0], [17.2, 10228.0], [17.3, 10286.0], [17.4, 10289.0], [17.5, 10328.0], [17.6, 10362.0], [17.7, 10449.0], [17.8, 10450.0], [17.9, 10493.0], [18.0, 10536.0], [18.1, 10548.0], [18.2, 10664.0], [18.3, 10678.0], [18.4, 10682.0], [18.5, 10774.0], [18.6, 10777.0], [18.7, 10835.0], [18.8, 10843.0], [18.9, 10843.0], [19.0, 10903.0], [19.1, 10906.0], [19.2, 11030.0], [19.3, 11032.0], [19.4, 11077.0], [19.5, 11124.0], [19.6, 11136.0], [19.7, 11409.0], [19.8, 11430.0], [19.9, 11440.0], [20.0, 11482.0], [20.1, 11484.0], [20.2, 11529.0], [20.3, 11790.0], [20.4, 11885.0], [20.5, 11937.0], [20.6, 12129.0], [20.7, 12287.0], [20.8, 12310.0], [20.9, 12315.0], [21.0, 12331.0], [21.1, 12500.0], [21.2, 12818.0], [21.3, 12942.0], [21.4, 13033.0], [21.5, 13072.0], [21.6, 13153.0], [21.7, 13160.0], [21.8, 13160.0], [21.9, 13177.0], [22.0, 13202.0], [22.1, 13246.0], [22.2, 13359.0], [22.3, 13430.0], [22.4, 13537.0], [22.5, 13737.0], [22.6, 13828.0], [22.7, 13846.0], [22.8, 13926.0], [22.9, 13996.0], [23.0, 14015.0], [23.1, 14021.0], [23.2, 14057.0], [23.3, 14175.0], [23.4, 14214.0], [23.5, 14231.0], [23.6, 14268.0], [23.7, 14302.0], [23.8, 14365.0], [23.9, 14384.0], [24.0, 14526.0], [24.1, 14550.0], [24.2, 14554.0], [24.3, 14567.0], [24.4, 14586.0], [24.5, 14651.0], [24.6, 14675.0], [24.7, 14712.0], [24.8, 14788.0], [24.9, 14828.0], [25.0, 14907.0], [25.1, 15006.0], [25.2, 15032.0], [25.3, 15123.0], [25.4, 15182.0], [25.5, 15300.0], [25.6, 15374.0], [25.7, 15643.0], [25.8, 15785.0], [25.9, 15848.0], [26.0, 16548.0], [26.1, 16673.0], [26.2, 16830.0], [26.3, 17520.0], [26.4, 20234.0], [26.5, 20737.0], [26.6, 20947.0], [26.7, 21199.0], [26.8, 21358.0], [26.9, 21359.0], [27.0, 21563.0], [27.1, 21721.0], [27.2, 21769.0], [27.3, 21775.0], [27.4, 21776.0], [27.5, 21918.0], [27.6, 21925.0], [27.7, 22027.0], [27.8, 22038.0], [27.9, 22128.0], [28.0, 22130.0], [28.1, 22270.0], [28.2, 22276.0], [28.3, 22326.0], [28.4, 22631.0], [28.5, 22761.0], [28.6, 22899.0], [28.7, 22902.0], [28.8, 22967.0], [28.9, 22975.0], [29.0, 22989.0], [29.1, 22996.0], [29.2, 23011.0], [29.3, 23047.0], [29.4, 23088.0], [29.5, 23132.0], [29.6, 23174.0], [29.7, 23276.0], [29.8, 23292.0], [29.9, 23373.0], [30.0, 23378.0], [30.1, 23380.0], [30.2, 23668.0], [30.3, 23796.0], [30.4, 23990.0], [30.5, 24109.0], [30.6, 24143.0], [30.7, 24250.0], [30.8, 24558.0], [30.9, 24628.0], [31.0, 26548.0], [31.1, 27027.0], [31.2, 31469.0], [31.3, 32121.0], [31.4, 33431.0], [31.5, 37657.0], [31.6, 37716.0], [31.7, 37749.0], [31.8, 37774.0], [31.9, 37871.0], [32.0, 37979.0], [32.1, 38104.0], [32.2, 38106.0], [32.3, 38179.0], [32.4, 38194.0], [32.5, 38382.0], [32.6, 38409.0], [32.7, 38527.0], [32.8, 38646.0], [32.9, 38692.0], [33.0, 38884.0], [33.1, 38939.0], [33.2, 39020.0], [33.3, 39122.0], [33.4, 39259.0], [33.5, 39317.0], [33.6, 39381.0], [33.7, 39398.0], [33.8, 39406.0], [33.9, 39465.0], [34.0, 39524.0], [34.1, 39562.0], [34.2, 39629.0], [34.3, 39869.0], [34.4, 39968.0], [34.5, 40058.0], [34.6, 40195.0], [34.7, 40207.0], [34.8, 40209.0], [34.9, 40436.0], [35.0, 40460.0], [35.1, 40471.0], [35.2, 40494.0], [35.3, 40546.0], [35.4, 40659.0], [35.5, 40706.0], [35.6, 41438.0], [35.7, 41672.0], [35.8, 42011.0], [35.9, 44608.0], [36.0, 47983.0], [36.1, 49363.0], [36.2, 55590.0], [36.3, 57922.0], [36.4, 61566.0], [36.5, 61911.0], [36.6, 69797.0], [36.7, 69877.0], [36.8, 70005.0], [36.9, 70056.0], [37.0, 70437.0], [37.1, 70493.0], [37.2, 70626.0], [37.3, 70637.0], [37.4, 70841.0], [37.5, 70951.0], [37.6, 71130.0], [37.7, 71206.0], [37.8, 71288.0], [37.9, 71461.0], [38.0, 71469.0], [38.1, 71496.0], [38.2, 71523.0], [38.3, 71661.0], [38.4, 71669.0], [38.5, 71693.0], [38.6, 71742.0], [38.7, 71757.0], [38.8, 71862.0], [38.9, 71887.0], [39.0, 71893.0], [39.1, 71896.0], [39.2, 71904.0], [39.3, 71939.0], [39.4, 71963.0], [39.5, 71976.0], [39.6, 71995.0], [39.7, 72067.0], [39.8, 72079.0], [39.9, 72290.0], [40.0, 72390.0], [40.1, 72951.0], [40.2, 72967.0], [40.3, 73092.0], [40.4, 73104.0], [40.5, 73504.0], [40.6, 76853.0], [40.7, 78966.0], [40.8, 80117.0], [40.9, 81897.0], [41.0, 85359.0], [41.1, 87108.0], [41.2, 92015.0], [41.3, 92065.0], [41.4, 92122.0], [41.5, 92186.0], [41.6, 92240.0], [41.7, 92264.0], [41.8, 98087.0], [41.9, 98263.0], [42.0, 102476.0], [42.1, 103113.0], [42.2, 105147.0], [42.3, 105990.0], [42.4, 107302.0], [42.5, 107378.0], [42.6, 107446.0], [42.7, 107526.0], [42.8, 116046.0], [42.9, 117846.0], [43.0, 125938.0], [43.1, 127812.0], [43.2, 129286.0], [43.3, 129474.0], [43.4, 129481.0], [43.5, 129767.0], [43.6, 129833.0], [43.7, 129865.0], [43.8, 129874.0], [43.9, 129902.0], [44.0, 130140.0], [44.1, 130261.0], [44.2, 130290.0], [44.3, 130335.0], [44.4, 130369.0], [44.5, 130370.0], [44.6, 130375.0], [44.7, 130390.0], [44.8, 130447.0], [44.9, 130469.0], [45.0, 130480.0], [45.1, 130513.0], [45.2, 130525.0], [45.3, 130605.0], [45.4, 130612.0], [45.5, 130675.0], [45.6, 130686.0], [45.7, 130741.0], [45.8, 130818.0], [45.9, 130952.0], [46.0, 130988.0], [46.1, 130993.0], [46.2, 131128.0], [46.3, 131147.0], [46.4, 131179.0], [46.5, 131234.0], [46.6, 131297.0], [46.7, 131327.0], [46.8, 131371.0], [46.9, 131401.0], [47.0, 131401.0], [47.1, 131402.0], [47.2, 131443.0], [47.3, 131496.0], [47.4, 131535.0], [47.5, 131675.0], [47.6, 131699.0], [47.7, 131709.0], [47.8, 131822.0], [47.9, 131832.0], [48.0, 131870.0], [48.1, 131924.0], [48.2, 131929.0], [48.3, 131949.0], [48.4, 131954.0], [48.5, 131981.0], [48.6, 132026.0], [48.7, 132092.0], [48.8, 132160.0], [48.9, 132181.0], [49.0, 132193.0], [49.1, 132343.0], [49.2, 132384.0], [49.3, 132407.0], [49.4, 132432.0], [49.5, 132449.0], [49.6, 132507.0], [49.7, 132550.0], [49.8, 132560.0], [49.9, 132597.0], [50.0, 132741.0], [50.1, 132763.0], [50.2, 132781.0], [50.3, 132783.0], [50.4, 132787.0], [50.5, 132804.0], [50.6, 132807.0], [50.7, 132811.0], [50.8, 132818.0], [50.9, 132820.0], [51.0, 132820.0], [51.1, 132823.0], [51.2, 132823.0], [51.3, 132824.0], [51.4, 132827.0], [51.5, 132827.0], [51.6, 132829.0], [51.7, 132830.0], [51.8, 132831.0], [51.9, 132834.0], [52.0, 132834.0], [52.1, 132835.0], [52.2, 132837.0], [52.3, 132838.0], [52.4, 132839.0], [52.5, 132839.0], [52.6, 132843.0], [52.7, 132851.0], [52.8, 132852.0], [52.9, 132853.0], [53.0, 132858.0], [53.1, 132865.0], [53.2, 132866.0], [53.3, 132866.0], [53.4, 132867.0], [53.5, 132873.0], [53.6, 132875.0], [53.7, 132879.0], [53.8, 132880.0], [53.9, 132882.0], [54.0, 132882.0], [54.1, 132882.0], [54.2, 132884.0], [54.3, 132888.0], [54.4, 132890.0], [54.5, 132890.0], [54.6, 132890.0], [54.7, 132892.0], [54.8, 132892.0], [54.9, 132894.0], [55.0, 132894.0], [55.1, 132894.0], [55.2, 132897.0], [55.3, 132897.0], [55.4, 132897.0], [55.5, 132897.0], [55.6, 132898.0], [55.7, 132899.0], [55.8, 132902.0], [55.9, 132903.0], [56.0, 132903.0], [56.1, 132903.0], [56.2, 132904.0], [56.3, 132904.0], [56.4, 132904.0], [56.5, 132907.0], [56.6, 132910.0], [56.7, 132911.0], [56.8, 132914.0], [56.9, 132914.0], [57.0, 132915.0], [57.1, 132916.0], [57.2, 132917.0], [57.3, 132917.0], [57.4, 132926.0], [57.5, 132939.0], [57.6, 132939.0], [57.7, 132939.0], [57.8, 132940.0], [57.9, 132942.0], [58.0, 132945.0], [58.1, 132945.0], [58.2, 132946.0], [58.3, 132946.0], [58.4, 132954.0], [58.5, 132954.0], [58.6, 132954.0], [58.7, 132958.0], [58.8, 132958.0], [58.9, 132958.0], [59.0, 132959.0], [59.1, 132960.0], [59.2, 132964.0], [59.3, 132964.0], [59.4, 132967.0], [59.5, 132968.0], [59.6, 132968.0], [59.7, 132970.0], [59.8, 132971.0], [59.9, 132971.0], [60.0, 132971.0], [60.1, 132972.0], [60.2, 132972.0], [60.3, 132972.0], [60.4, 132974.0], [60.5, 132976.0], [60.6, 132976.0], [60.7, 132979.0], [60.8, 132981.0], [60.9, 132982.0], [61.0, 132983.0], [61.1, 132983.0], [61.2, 132983.0], [61.3, 132990.0], [61.4, 132990.0], [61.5, 132993.0], [61.6, 132994.0], [61.7, 132994.0], [61.8, 132996.0], [61.9, 132996.0], [62.0, 132998.0], [62.1, 132999.0], [62.2, 133005.0], [62.3, 133006.0], [62.4, 133010.0], [62.5, 133017.0], [62.6, 133020.0], [62.7, 133024.0], [62.8, 133024.0], [62.9, 133024.0], [63.0, 133025.0], [63.1, 133026.0], [63.2, 133028.0], [63.3, 133029.0], [63.4, 133029.0], [63.5, 133029.0], [63.6, 133030.0], [63.7, 133033.0], [63.8, 133033.0], [63.9, 133033.0], [64.0, 133034.0], [64.1, 133034.0], [64.2, 133034.0], [64.3, 133036.0], [64.4, 133038.0], [64.5, 133039.0], [64.6, 133039.0], [64.7, 133040.0], [64.8, 133040.0], [64.9, 133040.0], [65.0, 133040.0], [65.1, 133041.0], [65.2, 133042.0], [65.3, 133042.0], [65.4, 133043.0], [65.5, 133044.0], [65.6, 133044.0], [65.7, 133047.0], [65.8, 133047.0], [65.9, 133047.0], [66.0, 133047.0], [66.1, 133049.0], [66.2, 133050.0], [66.3, 133050.0], [66.4, 133051.0], [66.5, 133051.0], [66.6, 133051.0], [66.7, 133052.0], [66.8, 133054.0], [66.9, 133056.0], [67.0, 133058.0], [67.1, 133059.0], [67.2, 133061.0], [67.3, 133064.0], [67.4, 133064.0], [67.5, 133067.0], [67.6, 133069.0], [67.7, 133071.0], [67.8, 133073.0], [67.9, 133074.0], [68.0, 133076.0], [68.1, 133076.0], [68.2, 133076.0], [68.3, 133077.0], [68.4, 133078.0], [68.5, 133080.0], [68.6, 133080.0], [68.7, 133080.0], [68.8, 133084.0], [68.9, 133084.0], [69.0, 133094.0], [69.1, 133095.0], [69.2, 133096.0], [69.3, 133096.0], [69.4, 133097.0], [69.5, 133097.0], [69.6, 133098.0], [69.7, 133098.0], [69.8, 133098.0], [69.9, 133098.0], [70.0, 133099.0], [70.1, 133101.0], [70.2, 133102.0], [70.3, 133111.0], [70.4, 133112.0], [70.5, 133115.0], [70.6, 133115.0], [70.7, 133115.0], [70.8, 133116.0], [70.9, 133116.0], [71.0, 133117.0], [71.1, 133117.0], [71.2, 133118.0], [71.3, 133119.0], [71.4, 133120.0], [71.5, 133120.0], [71.6, 133123.0], [71.7, 133125.0], [71.8, 133127.0], [71.9, 133128.0], [72.0, 133129.0], [72.1, 133131.0], [72.2, 133131.0], [72.3, 133132.0], [72.4, 133132.0], [72.5, 133132.0], [72.6, 133133.0], [72.7, 133134.0], [72.8, 133135.0], [72.9, 133137.0], [73.0, 133143.0], [73.1, 133144.0], [73.2, 133144.0], [73.3, 133144.0], [73.4, 133147.0], [73.5, 133147.0], [73.6, 133149.0], [73.7, 133150.0], [73.8, 133150.0], [73.9, 133151.0], [74.0, 133154.0], [74.1, 133154.0], [74.2, 133155.0], [74.3, 133156.0], [74.4, 133158.0], [74.5, 133161.0], [74.6, 133162.0], [74.7, 133163.0], [74.8, 133165.0], [74.9, 133170.0], [75.0, 133171.0], [75.1, 133172.0], [75.2, 133176.0], [75.3, 133177.0], [75.4, 133178.0], [75.5, 133179.0], [75.6, 133179.0], [75.7, 133179.0], [75.8, 133182.0], [75.9, 133182.0], [76.0, 133183.0], [76.1, 133185.0], [76.2, 133186.0], [76.3, 133187.0], [76.4, 133187.0], [76.5, 133188.0], [76.6, 133189.0], [76.7, 133191.0], [76.8, 133192.0], [76.9, 133197.0], [77.0, 133200.0], [77.1, 133201.0], [77.2, 133202.0], [77.3, 133203.0], [77.4, 133206.0], [77.5, 133206.0], [77.6, 133207.0], [77.7, 133207.0], [77.8, 133207.0], [77.9, 133207.0], [78.0, 133209.0], [78.1, 133210.0], [78.2, 133212.0], [78.3, 133212.0], [78.4, 133213.0], [78.5, 133213.0], [78.6, 133214.0], [78.7, 133216.0], [78.8, 133219.0], [78.9, 133221.0], [79.0, 133222.0], [79.1, 133222.0], [79.2, 133224.0], [79.3, 133224.0], [79.4, 133225.0], [79.5, 133226.0], [79.6, 133227.0], [79.7, 133231.0], [79.8, 133234.0], [79.9, 133236.0], [80.0, 133237.0], [80.1, 133238.0], [80.2, 133239.0], [80.3, 133239.0], [80.4, 133239.0], [80.5, 133240.0], [80.6, 133241.0], [80.7, 133242.0], [80.8, 133242.0], [80.9, 133242.0], [81.0, 133243.0], [81.1, 133244.0], [81.2, 133246.0], [81.3, 133246.0], [81.4, 133248.0], [81.5, 133248.0], [81.6, 133248.0], [81.7, 133249.0], [81.8, 133251.0], [81.9, 133252.0], [82.0, 133253.0], [82.1, 133254.0], [82.2, 133255.0], [82.3, 133256.0], [82.4, 133257.0], [82.5, 133258.0], [82.6, 133258.0], [82.7, 133258.0], [82.8, 133259.0], [82.9, 133260.0], [83.0, 133260.0], [83.1, 133261.0], [83.2, 133262.0], [83.3, 133263.0], [83.4, 133265.0], [83.5, 133268.0], [83.6, 133269.0], [83.7, 133275.0], [83.8, 133277.0], [83.9, 133279.0], [84.0, 133285.0], [84.1, 133287.0], [84.2, 133290.0], [84.3, 133290.0], [84.4, 133295.0], [84.5, 133298.0], [84.6, 133300.0], [84.7, 133300.0], [84.8, 133301.0], [84.9, 133301.0], [85.0, 133303.0], [85.1, 133304.0], [85.2, 133305.0], [85.3, 133306.0], [85.4, 133306.0], [85.5, 133308.0], [85.6, 133311.0], [85.7, 133313.0], [85.8, 133319.0], [85.9, 133322.0], [86.0, 133323.0], [86.1, 133326.0], [86.2, 133329.0], [86.3, 133329.0], [86.4, 133330.0], [86.5, 133335.0], [86.6, 133335.0], [86.7, 133336.0], [86.8, 133340.0], [86.9, 133354.0], [87.0, 133355.0], [87.1, 133357.0], [87.2, 133357.0], [87.3, 133358.0], [87.4, 133361.0], [87.5, 133361.0], [87.6, 133363.0], [87.7, 133364.0], [87.8, 133365.0], [87.9, 133370.0], [88.0, 133370.0], [88.1, 133370.0], [88.2, 133377.0], [88.3, 133379.0], [88.4, 133381.0], [88.5, 133384.0], [88.6, 133385.0], [88.7, 133395.0], [88.8, 133401.0], [88.9, 133410.0], [89.0, 133416.0], [89.1, 133419.0], [89.2, 133421.0], [89.3, 133429.0], [89.4, 133429.0], [89.5, 133429.0], [89.6, 133429.0], [89.7, 133429.0], [89.8, 133430.0], [89.9, 133430.0], [90.0, 133433.0], [90.1, 133434.0], [90.2, 133449.0], [90.3, 133450.0], [90.4, 133452.0], [90.5, 133457.0], [90.6, 133469.0], [90.7, 133470.0], [90.8, 133470.0], [90.9, 133474.0], [91.0, 133479.0], [91.1, 133482.0], [91.2, 133484.0], [91.3, 133490.0], [91.4, 133503.0], [91.5, 133510.0], [91.6, 133510.0], [91.7, 133515.0], [91.8, 133529.0], [91.9, 133535.0], [92.0, 133541.0], [92.1, 133548.0], [92.2, 133550.0], [92.3, 133550.0], [92.4, 133561.0], [92.5, 133561.0], [92.6, 133566.0], [92.7, 133571.0], [92.8, 133573.0], [92.9, 133582.0], [93.0, 133593.0], [93.1, 133597.0], [93.2, 133609.0], [93.3, 133627.0], [93.4, 133638.0], [93.5, 133639.0], [93.6, 133640.0], [93.7, 133651.0], [93.8, 133653.0], [93.9, 133653.0], [94.0, 133653.0], [94.1, 133683.0], [94.2, 133688.0], [94.3, 133690.0], [94.4, 133705.0], [94.5, 133771.0], [94.6, 133780.0], [94.7, 133798.0], [94.8, 133821.0], [94.9, 133827.0], [95.0, 133844.0], [95.1, 133895.0], [95.2, 134182.0], [95.3, 134191.0], [95.4, 134199.0], [95.5, 134204.0], [95.6, 134245.0], [95.7, 134352.0], [95.8, 134373.0], [95.9, 134455.0], [96.0, 134543.0], [96.1, 134544.0], [96.2, 134580.0], [96.3, 134587.0], [96.4, 134611.0], [96.5, 134696.0], [96.6, 134782.0], [96.7, 135011.0], [96.8, 135068.0], [96.9, 135497.0], [97.0, 149831.0], [97.1, 150851.0], [97.2, 157114.0], [97.3, 158539.0], [97.4, 159079.0], [97.5, 163601.0], [97.6, 182229.0], [97.7, 194362.0], [97.8, 194416.0], [97.9, 194924.0], [98.0, 195288.0], [98.1, 195437.0], [98.2, 199638.0], [98.3, 199664.0], [98.4, 200054.0], [98.5, 200101.0], [98.6, 209714.0], [98.7, 209887.0], [98.8, 209934.0], [98.9, 209934.0], [99.0, 209934.0], [99.1, 209935.0], [99.2, 209961.0], [99.3, 210026.0], [99.4, 210049.0], [99.5, 210074.0], [99.6, 210074.0], [99.7, 210171.0], [99.8, 210174.0], [99.9, 252244.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3100.0, "maxY": 79.0, "series": [{"data": [[133600.0, 12.0], [132000.0, 2.0], [194400.0, 1.0], [132900.0, 64.0], [131300.0, 2.0], [134500.0, 4.0], [158500.0, 1.0], [200100.0, 1.0], [209700.0, 1.0], [72300.0, 1.0], [73100.0, 1.0], [71500.0, 1.0], [105100.0, 1.0], [105900.0, 1.0], [107500.0, 1.0], [125900.0, 1.0], [130700.0, 1.0], [129900.0, 1.0], [133800.0, 4.0], [135400.0, 1.0], [149800.0, 1.0], [252200.0, 1.0], [133100.0, 69.0], [131500.0, 1.0], [134700.0, 1.0], [38500.0, 1.0], [38100.0, 4.0], [38900.0, 1.0], [37700.0, 3.0], [39300.0, 3.0], [157100.0, 1.0], [40100.0, 1.0], [40500.0, 1.0], [49300.0, 1.0], [209900.0, 5.0], [72200.0, 1.0], [71400.0, 3.0], [70600.0, 2.0], [73000.0, 1.0], [69800.0, 1.0], [81800.0, 1.0], [92200.0, 2.0], [107400.0, 1.0], [117800.0, 1.0], [130600.0, 4.0], [129800.0, 3.0], [132400.0, 3.0], [199600.0, 2.0], [133300.0, 42.0], [131700.0, 1.0], [3100.0, 1.0], [210100.0, 2.0], [3200.0, 1.0], [3300.0, 1.0], [4500.0, 2.0], [4400.0, 1.0], [72900.0, 2.0], [69700.0, 1.0], [4700.0, 1.0], [80100.0, 1.0], [4900.0, 1.0], [5100.0, 1.0], [5300.0, 3.0], [5200.0, 1.0], [5600.0, 3.0], [5500.0, 4.0], [5400.0, 2.0], [92100.0, 2.0], [5700.0, 2.0], [6000.0, 5.0], [5900.0, 5.0], [6100.0, 3.0], [6300.0, 4.0], [6200.0, 3.0], [6600.0, 7.0], [6400.0, 4.0], [6500.0, 4.0], [6900.0, 5.0], [6800.0, 3.0], [107300.0, 2.0], [6700.0, 4.0], [7000.0, 6.0], [7300.0, 3.0], [7200.0, 10.0], [7400.0, 5.0], [7500.0, 3.0], [7600.0, 6.0], [7800.0, 3.0], [7900.0, 1.0], [7700.0, 3.0], [8100.0, 3.0], [8000.0, 5.0], [129700.0, 1.0], [130500.0, 2.0], [8700.0, 4.0], [8400.0, 4.0], [8500.0, 3.0], [8300.0, 2.0], [134200.0, 2.0], [8600.0, 1.0], [8200.0, 1.0], [9000.0, 2.0], [9100.0, 1.0], [8800.0, 4.0], [9200.0, 2.0], [8900.0, 2.0], [9400.0, 5.0], [9600.0, 3.0], [9500.0, 4.0], [9700.0, 5.0], [10000.0, 3.0], [9900.0, 2.0], [10100.0, 2.0], [10200.0, 3.0], [9800.0, 3.0], [10300.0, 2.0], [10700.0, 2.0], [10500.0, 2.0], [10600.0, 3.0], [10400.0, 3.0], [10900.0, 2.0], [10800.0, 2.0], [11000.0, 3.0], [11100.0, 2.0], [11400.0, 5.0], [11500.0, 1.0], [11700.0, 1.0], [182200.0, 1.0], [12200.0, 1.0], [12100.0, 1.0], [11900.0, 1.0], [11800.0, 1.0], [12500.0, 1.0], [12300.0, 3.0], [13100.0, 4.0], [13000.0, 2.0], [13300.0, 1.0], [13200.0, 2.0], [12900.0, 1.0], [12800.0, 1.0], [13400.0, 1.0], [13700.0, 1.0], [13800.0, 2.0], [13500.0, 1.0], [14200.0, 3.0], [14000.0, 3.0], [14300.0, 3.0], [14100.0, 1.0], [13900.0, 2.0], [14500.0, 5.0], [14600.0, 2.0], [14700.0, 2.0], [14800.0, 1.0], [14900.0, 1.0], [15100.0, 2.0], [15300.0, 2.0], [15000.0, 2.0], [15700.0, 1.0], [15800.0, 1.0], [15600.0, 1.0], [16600.0, 1.0], [16800.0, 1.0], [20200.0, 1.0], [22000.0, 2.0], [22200.0, 2.0], [23000.0, 3.0], [23200.0, 2.0], [22600.0, 1.0], [22800.0, 1.0], [23600.0, 1.0], [24200.0, 1.0], [24600.0, 1.0], [27000.0, 1.0], [31400.0, 1.0], [133500.0, 18.0], [131900.0, 5.0], [38400.0, 1.0], [38800.0, 1.0], [37600.0, 1.0], [39200.0, 1.0], [40400.0, 4.0], [39600.0, 1.0], [40000.0, 1.0], [41600.0, 1.0], [42000.0, 1.0], [194300.0, 1.0], [70400.0, 2.0], [71200.0, 2.0], [72000.0, 2.0], [76800.0, 1.0], [92000.0, 2.0], [102400.0, 1.0], [116000.0, 1.0], [130400.0, 3.0], [132800.0, 53.0], [134400.0, 1.0], [131200.0, 2.0], [195200.0, 1.0], [200000.0, 1.0], [133700.0, 4.0], [132100.0, 3.0], [71900.0, 5.0], [71100.0, 1.0], [73500.0, 1.0], [87100.0, 1.0], [103100.0, 1.0], [130300.0, 5.0], [133000.0, 79.0], [131400.0, 5.0], [134600.0, 2.0], [195400.0, 1.0], [209800.0, 1.0], [132300.0, 2.0], [37900.0, 1.0], [38300.0, 1.0], [40700.0, 1.0], [39900.0, 1.0], [39100.0, 1.0], [39500.0, 2.0], [47900.0, 1.0], [55500.0, 1.0], [57900.0, 1.0], [61500.0, 1.0], [61900.0, 1.0], [71800.0, 4.0], [98200.0, 1.0], [127800.0, 1.0], [129400.0, 2.0], [130200.0, 2.0], [133200.0, 77.0], [131600.0, 2.0], [150800.0, 1.0], [163600.0, 1.0], [210000.0, 4.0], [132500.0, 4.0], [134100.0, 3.0], [194900.0, 1.0], [71700.0, 2.0], [70900.0, 1.0], [78900.0, 1.0], [85300.0, 1.0], [130900.0, 3.0], [130100.0, 1.0], [133400.0, 26.0], [131800.0, 3.0], [135000.0, 2.0], [159000.0, 1.0], [16500.0, 1.0], [17500.0, 1.0], [20900.0, 1.0], [21300.0, 2.0], [21100.0, 1.0], [21500.0, 1.0], [20700.0, 1.0], [21900.0, 2.0], [22100.0, 2.0], [21700.0, 4.0], [22300.0, 1.0], [23300.0, 3.0], [23100.0, 2.0], [22900.0, 5.0], [22700.0, 1.0], [23700.0, 1.0], [24500.0, 1.0], [24100.0, 2.0], [23900.0, 1.0], [26500.0, 1.0], [32100.0, 1.0], [132700.0, 5.0], [131100.0, 3.0], [33400.0, 1.0], [134300.0, 2.0], [38600.0, 2.0], [37800.0, 1.0], [39400.0, 2.0], [40200.0, 2.0], [39800.0, 1.0], [40600.0, 1.0], [39000.0, 1.0], [41400.0, 1.0], [44600.0, 1.0], [70800.0, 1.0], [70000.0, 2.0], [71600.0, 3.0], [98000.0, 1.0], [129200.0, 1.0], [130800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 252200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 411.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 589.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 411.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 589.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.71562536E12, "maxY": 100.0, "series": [{"data": [[1.71562572E12, 100.0], [1.71562638E12, 7.0869565217391335], [1.71562536E12, 100.0], [1.71562632E12, 25.700000000000014], [1.71562542E12, 100.0], [1.71562602E12, 89.253164556962], [1.71562596E12, 94.08474576271183], [1.71562566E12, 100.0], [1.7156256E12, 100.0], [1.71562626E12, 46.813559322033896], [1.7156262E12, 61.94915254237287], [1.7156259E12, 97.5], [1.71562584E12, 98.28915662650597], [1.71562554E12, 100.0], [1.71562644E12, 1.6666666666666667], [1.71562614E12, 71.84507042253519], [1.71562608E12, 81.09523809523809], [1.71562578E12, 99.48], [1.71562548E12, 100.0]], "isOverall": false, "label": "ConTest", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562644E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3224.0, "minX": 1.0, "maxY": 157114.0, "series": [{"data": [[2.0, 39650.75], [3.0, 132892.0], [4.0, 6466.0], [5.0, 4554.0], [6.0, 69540.49999999999], [7.0, 6309.0], [8.0, 125122.5], [9.0, 130525.0], [10.0, 4486.5], [11.0, 109061.0], [12.0, 131949.0], [13.0, 5599.5], [14.0, 3224.0], [15.0, 72005.5], [16.0, 7179.5], [17.0, 6385.0], [18.0, 18412.333333333332], [19.0, 91774.66666666666], [20.0, 19490.0], [21.0, 7235.0], [22.0, 6459.0], [23.0, 69810.0], [24.0, 132312.5], [25.0, 66890.0], [26.0, 18664.0], [27.0, 132597.0], [28.0, 10289.0], [29.0, 133123.0], [30.0, 21918.0], [31.0, 7483.0], [33.0, 132904.0], [32.0, 7659.0], [35.0, 66974.4], [34.0, 20270.666666666668], [37.0, 134611.0], [36.0, 30460.0], [39.0, 65388.24999999999], [38.0, 29658.333333333336], [41.0, 71958.5], [40.0, 55558.5], [43.0, 76621.88888888889], [42.0, 46031.75], [45.0, 8979.5], [44.0, 40209.0], [47.0, 9794.0], [46.0, 8667.0], [49.0, 133277.66666666666], [48.0, 6541.0], [51.0, 102606.5], [50.0, 109077.41666666666], [53.0, 71661.0], [52.0, 20876.5], [55.0, 48900.25], [54.0, 15743.0], [57.0, 132447.0], [56.0, 88253.0], [59.0, 25945.0], [58.0, 43588.333333333336], [61.0, 71055.5], [60.0, 67908.99999999999], [63.0, 131924.0], [62.0, 132823.0], [67.0, 65316.0], [66.0, 95004.66666666667], [65.0, 131040.2], [64.0, 109889.5], [71.0, 8372.0], [70.0, 54102.84615384615], [69.0, 38046.375], [68.0, 8398.5], [75.0, 133179.0], [74.0, 14736.6], [73.0, 118810.79999999997], [72.0, 133230.5], [79.0, 47743.78571428572], [78.0, 77865.5], [77.0, 71958.5], [76.0, 18055.333333333336], [83.0, 68670.88888888889], [82.0, 89719.5714285714], [81.0, 81275.25], [80.0, 60868.6], [87.0, 14828.0], [86.0, 130365.0], [85.0, 86599.0], [84.0, 79134.0], [91.0, 101482.90196078431], [90.0, 157114.0], [89.0, 44565.75], [88.0, 53047.700000000004], [95.0, 75447.47222222222], [94.0, 7267.0], [93.0, 69475.83333333334], [92.0, 86734.0], [99.0, 97496.64], [98.0, 95487.42268041235], [97.0, 90365.0], [96.0, 66707.58333333333], [100.0, 104205.38274932615], [1.0, 7437.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[83.77900000000001, 88742.04200000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5.8, "minX": 1.71562536E12, "maxY": 4996.333333333333, "series": [{"data": [[1.71562572E12, 3774.8166666666666], [1.71562638E12, 608.9166666666666], [1.71562536E12, 41.65], [1.71562632E12, 825.7666666666667], [1.71562542E12, 7.35], [1.71562602E12, 2705.2166666666667], [1.71562596E12, 1450.6166666666666], [1.71562566E12, 335.7], [1.7156256E12, 4459.7], [1.71562626E12, 1350.15], [1.7156262E12, 1551.0833333333333], [1.7156259E12, 1438.3666666666666], [1.71562584E12, 2966.1833333333334], [1.71562554E12, 546.4333333333333], [1.71562644E12, 7.35], [1.71562614E12, 1831.65], [1.71562608E12, 1711.5833333333333], [1.71562578E12, 1428.5666666666666], [1.71562548E12, 4996.333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71562572E12, 27.066666666666666], [1.71562638E12, 23.2], [1.71562536E12, 32.86666666666667], [1.71562632E12, 69.6], [1.71562542E12, 5.8], [1.71562602E12, 56.06666666666667], [1.71562596E12, 63.8], [1.71562566E12, 15.466666666666667], [1.7156256E12, 27.066666666666666], [1.71562626E12, 67.66666666666667], [1.7156262E12, 59.93333333333333], [1.7156259E12, 54.13333333333333], [1.71562584E12, 54.13333333333333], [1.71562554E12, 15.466666666666667], [1.71562644E12, 5.8], [1.71562614E12, 73.46666666666667], [1.71562608E12, 61.86666666666667], [1.71562578E12, 46.4], [1.71562548E12, 34.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562644E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5760.333333333333, "minX": 1.71562536E12, "maxY": 116462.2551020408, "series": [{"data": [[1.71562572E12, 114321.55294117647], [1.71562638E12, 69609.7391304348], [1.71562536E12, 15728.647058823532], [1.71562632E12, 49517.44], [1.71562542E12, 82547.0], [1.71562602E12, 89923.9240506329], [1.71562596E12, 72036.23728813555], [1.71562566E12, 78597.5], [1.7156256E12, 116462.2551020408], [1.71562626E12, 70559.15254237292], [1.7156262E12, 86651.49152542374], [1.7156259E12, 71946.09259259263], [1.71562584E12, 94345.33734939758], [1.71562554E12, 83665.94444444444], [1.71562644E12, 5760.333333333333], [1.71562614E12, 73795.80281690141], [1.71562608E12, 75179.06349206346], [1.71562578E12, 105623.01999999997], [1.71562548E12, 114228.66071428572]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562644E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2190.892857142858, "minX": 1.71562536E12, "maxY": 82546.66666666667, "series": [{"data": [[1.71562572E12, 3132.0941176470583], [1.71562638E12, 8123.82608695652], [1.71562536E12, 15728.117647058823], [1.71562632E12, 12215.86], [1.71562542E12, 82546.66666666667], [1.71562602E12, 6519.873417721517], [1.71562596E12, 13448.406779661012], [1.71562566E12, 21753.857142857145], [1.7156256E12, 2610.2346938775504], [1.71562626E12, 17027.1186440678], [1.7156262E12, 17577.05084745763], [1.7156259E12, 11549.222222222223], [1.71562584E12, 8127.566265060244], [1.71562554E12, 11640.72222222222], [1.71562644E12, 5760.333333333333], [1.71562614E12, 11895.690140845072], [1.71562608E12, 10061.761904761906], [1.71562578E12, 13756.639999999998], [1.71562548E12, 2190.892857142858]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562644E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 685.3333333333334, "minX": 1.71562536E12, "maxY": 116006.14285714286, "series": [{"data": [[1.71562572E12, 113744.63529411762], [1.71562638E12, 67673.21739130435], [1.71562536E12, 12335.764705882353], [1.71562632E12, 46877.840000000004], [1.71562542E12, 79012.66666666667], [1.71562602E12, 88571.96202531643], [1.71562596E12, 69990.8813559322], [1.71562566E12, 76732.5], [1.7156256E12, 116006.14285714286], [1.71562626E12, 68301.83050847457], [1.7156262E12, 84665.33898305084], [1.7156259E12, 70152.46296296296], [1.71562584E12, 93156.36144578313], [1.71562554E12, 82130.6111111111], [1.71562644E12, 685.3333333333334], [1.71562614E12, 71908.22535211263], [1.71562608E12, 73373.17460317464], [1.71562578E12, 103905.42000000001], [1.71562548E12, 113741.66964285712]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562644E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3192.0, "minX": 1.71562536E12, "maxY": 149831.0, "series": [{"data": [[1.71562572E12, 71469.0], [1.71562638E12, 116046.0], [1.71562536E12, 44608.0], [1.71562632E12, 69877.0], [1.71562542E12, 105147.0], [1.71562602E12, 70626.0], [1.71562596E12, 105990.0], [1.71562566E12, 72951.0], [1.7156256E12, 70841.0], [1.71562626E12, 149831.0], [1.7156262E12, 98263.0], [1.7156259E12, 72967.0], [1.71562584E12, 87108.0], [1.71562554E12, 80117.0], [1.71562644E12, 7437.0], [1.71562614E12, 125938.0], [1.71562608E12, 71523.0], [1.71562578E12, 78966.0], [1.71562548E12, 39465.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71562572E12, 5359.0], [1.71562638E12, 3192.0], [1.71562536E12, 5991.0], [1.71562632E12, 3224.0], [1.71562542E12, 39381.0], [1.71562602E12, 5652.0], [1.71562596E12, 6454.0], [1.71562566E12, 5340.0], [1.7156256E12, 4488.0], [1.71562626E12, 6205.0], [1.7156262E12, 5687.0], [1.7156259E12, 5373.0], [1.71562584E12, 5536.0], [1.71562554E12, 6043.0], [1.71562644E12, 4707.0], [1.71562614E12, 5551.0], [1.71562608E12, 5442.0], [1.71562578E12, 4988.0], [1.71562548E12, 4540.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71562572E12, 70762.5], [1.71562638E12, 85925.10000000011], [1.71562536E12, 39838.399999999994], [1.71562632E12, 39710.8], [1.71562542E12, 105147.0], [1.71562602E12, 49363.0], [1.71562596E12, 71925.0], [1.71562566E12, 72951.0], [1.7156256E12, 54473.5], [1.71562626E12, 71930.2], [1.7156262E12, 72889.4], [1.7156259E12, 71585.4], [1.71562584E12, 71045.2], [1.71562554E12, 80117.0], [1.71562644E12, 7437.0], [1.71562614E12, 44001.00000000003], [1.71562608E12, 53046.999999999985], [1.71562578E12, 74305.0], [1.71562548E12, 25362.900000000023]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71562572E12, 71469.0], [1.71562638E12, 116046.0], [1.71562536E12, 44608.0], [1.71562632E12, 69877.0], [1.71562542E12, 105147.0], [1.71562602E12, 70626.0], [1.71562596E12, 105990.0], [1.71562566E12, 72951.0], [1.7156256E12, 70841.0], [1.71562626E12, 149831.0], [1.7156262E12, 98263.0], [1.7156259E12, 72967.0], [1.71562584E12, 87108.0], [1.71562554E12, 80117.0], [1.71562644E12, 7437.0], [1.71562614E12, 125938.0], [1.71562608E12, 71523.0], [1.71562578E12, 78966.0], [1.71562548E12, 39465.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71562572E12, 9593.0], [1.71562638E12, 6331.0], [1.71562536E12, 11482.0], [1.71562632E12, 10103.0], [1.71562542E12, 103113.0], [1.71562602E12, 10682.0], [1.71562596E12, 9767.0], [1.71562566E12, 29884.0], [1.7156256E12, 11431.0], [1.71562626E12, 16548.0], [1.7156262E12, 22899.0], [1.7156259E12, 13448.5], [1.71562584E12, 11922.0], [1.71562554E12, 7655.5], [1.71562644E12, 5137.0], [1.71562614E12, 11911.0], [1.71562608E12, 13731.5], [1.71562578E12, 16213.5], [1.71562548E12, 13096.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71562572E12, 71469.0], [1.71562638E12, 116046.0], [1.71562536E12, 44608.0], [1.71562632E12, 44945.64999999996], [1.71562542E12, 105147.0], [1.71562602E12, 63108.0], [1.71562596E12, 82969.7999999999], [1.71562566E12, 72951.0], [1.7156256E12, 70841.0], [1.71562626E12, 88769.39999999967], [1.7156262E12, 98157.4], [1.7156259E12, 72707.34999999999], [1.71562584E12, 80261.24999999996], [1.71562554E12, 80117.0], [1.71562644E12, 7437.0], [1.71562614E12, 74565.79999999984], [1.71562608E12, 71482.7], [1.71562578E12, 78437.75], [1.71562548E12, 39465.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562644E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7263.0, "minX": 1.0, "maxY": 134587.0, "series": [{"data": [[1.0, 10906.0], [2.0, 14651.0], [4.0, 15300.0], [5.0, 14310.0], [10.0, 9807.0], [45.0, 23132.0], [23.0, 7263.0], [3.0, 11136.0], [6.0, 71742.0], [14.0, 76853.0], [29.0, 9761.0], [61.0, 71469.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 132892.0], [10.0, 132960.0], [45.0, 133138.5], [3.0, 132873.0], [14.0, 134587.0], [61.0, 133167.5], [1.0, 132970.0], [4.0, 133135.0], [74.0, 133040.5], [5.0, 131128.0], [87.0, 133329.0], [23.0, 133243.5], [6.0, 133147.0], [29.0, 132971.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 87.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 76853.0, "series": [{"data": [[1.0, 10906.0], [2.0, 14650.0], [4.0, 15299.0], [5.0, 14310.0], [10.0, 9806.0], [45.0, 23132.0], [23.0, 7263.0], [3.0, 11135.0], [6.0, 71741.0], [14.0, 76853.0], [29.0, 9761.0], [61.0, 71468.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [10.0, 0.0], [45.0, 0.0], [3.0, 0.0], [14.0, 0.0], [61.0, 0.0], [1.0, 0.0], [4.0, 0.0], [74.0, 0.0], [5.0, 0.0], [87.0, 0.0], [23.0, 0.0], [6.0, 0.0], [29.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 87.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7156253E12, "maxY": 1.8666666666666667, "series": [{"data": [[1.71562572E12, 1.4166666666666667], [1.71562638E12, 0.2], [1.71562536E12, 0.2833333333333333], [1.71562632E12, 0.4166666666666667], [1.71562542E12, 0.05], [1.71562602E12, 1.1833333333333333], [1.71562596E12, 0.9], [1.7156253E12, 1.6666666666666667], [1.71562566E12, 0.23333333333333334], [1.7156256E12, 1.6333333333333333], [1.71562626E12, 0.7], [1.7156262E12, 0.7833333333333333], [1.7156259E12, 0.8666666666666667], [1.71562584E12, 1.3666666666666667], [1.71562554E12, 0.3], [1.71562644E12, 0.016666666666666666], [1.71562614E12, 1.0], [1.71562608E12, 0.9666666666666667], [1.71562578E12, 0.8166666666666667], [1.71562548E12, 1.8666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562644E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71562536E12, "maxY": 1.5666666666666667, "series": [{"data": [[1.71562572E12, 0.23333333333333334], [1.71562638E12, 0.2], [1.71562536E12, 0.2833333333333333], [1.71562632E12, 0.6], [1.71562542E12, 0.05], [1.71562602E12, 0.48333333333333334], [1.71562596E12, 0.55], [1.71562566E12, 0.13333333333333333], [1.7156256E12, 0.23333333333333334], [1.71562626E12, 0.5833333333333334], [1.7156262E12, 0.5166666666666667], [1.7156259E12, 0.4666666666666667], [1.71562584E12, 0.4666666666666667], [1.71562554E12, 0.13333333333333333], [1.71562644E12, 0.05], [1.71562614E12, 0.6333333333333333], [1.71562608E12, 0.5333333333333333], [1.71562578E12, 0.4], [1.71562548E12, 0.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71562572E12, 1.1833333333333333], [1.71562638E12, 0.18333333333333332], [1.71562632E12, 0.23333333333333334], [1.71562602E12, 0.8333333333333334], [1.71562596E12, 0.43333333333333335], [1.71562566E12, 0.1], [1.7156256E12, 1.4], [1.71562626E12, 0.4], [1.7156262E12, 0.4666666666666667], [1.7156259E12, 0.43333333333333335], [1.71562584E12, 0.9166666666666666], [1.71562554E12, 0.16666666666666666], [1.71562614E12, 0.55], [1.71562608E12, 0.5166666666666667], [1.71562578E12, 0.43333333333333335], [1.71562548E12, 1.5666666666666667]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71562644E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71562536E12, "maxY": 1.5666666666666667, "series": [{"data": [[1.71562572E12, 0.23333333333333334], [1.71562638E12, 0.2], [1.71562536E12, 0.2833333333333333], [1.71562632E12, 0.6], [1.71562542E12, 0.05], [1.71562602E12, 0.48333333333333334], [1.71562596E12, 0.55], [1.71562566E12, 0.13333333333333333], [1.7156256E12, 0.23333333333333334], [1.71562626E12, 0.5833333333333334], [1.7156262E12, 0.5166666666666667], [1.7156259E12, 0.4666666666666667], [1.71562584E12, 0.4666666666666667], [1.71562554E12, 0.13333333333333333], [1.71562644E12, 0.05], [1.71562614E12, 0.6333333333333333], [1.71562608E12, 0.5333333333333333], [1.71562578E12, 0.4], [1.71562548E12, 0.3]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.71562572E12, 1.1833333333333333], [1.71562638E12, 0.18333333333333332], [1.71562632E12, 0.23333333333333334], [1.71562602E12, 0.8333333333333334], [1.71562596E12, 0.43333333333333335], [1.71562566E12, 0.1], [1.7156256E12, 1.4], [1.71562626E12, 0.4], [1.7156262E12, 0.4666666666666667], [1.7156259E12, 0.43333333333333335], [1.71562584E12, 0.9166666666666666], [1.71562554E12, 0.16666666666666666], [1.71562614E12, 0.55], [1.71562608E12, 0.5166666666666667], [1.71562578E12, 0.43333333333333335], [1.71562548E12, 1.5666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562644E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71562536E12, "maxY": 1.5666666666666667, "series": [{"data": [[1.71562572E12, 0.23333333333333334], [1.71562638E12, 0.2], [1.71562536E12, 0.2833333333333333], [1.71562632E12, 0.6], [1.71562542E12, 0.05], [1.71562602E12, 0.48333333333333334], [1.71562596E12, 0.55], [1.71562566E12, 0.13333333333333333], [1.7156256E12, 0.23333333333333334], [1.71562626E12, 0.5833333333333334], [1.7156262E12, 0.5166666666666667], [1.7156259E12, 0.4666666666666667], [1.71562584E12, 0.4666666666666667], [1.71562554E12, 0.13333333333333333], [1.71562644E12, 0.05], [1.71562614E12, 0.6333333333333333], [1.71562608E12, 0.5333333333333333], [1.71562578E12, 0.4], [1.71562548E12, 0.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71562572E12, 1.1833333333333333], [1.71562638E12, 0.18333333333333332], [1.71562632E12, 0.23333333333333334], [1.71562602E12, 0.8333333333333334], [1.71562596E12, 0.43333333333333335], [1.71562566E12, 0.1], [1.7156256E12, 1.4], [1.71562626E12, 0.4], [1.7156262E12, 0.4666666666666667], [1.7156259E12, 0.43333333333333335], [1.71562584E12, 0.9166666666666666], [1.71562554E12, 0.16666666666666666], [1.71562614E12, 0.55], [1.71562608E12, 0.5166666666666667], [1.71562578E12, 0.43333333333333335], [1.71562548E12, 1.5666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71562644E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

